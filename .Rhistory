#' Takes an emtools.species object with presence and background points, and builds a Bioclim model
#'
#' @param species An enmtools.species object
#' @param env A raster or raster stack of environmental data.
#' @param test.prop Proportion of data to withhold for model evaluation
#' @param ... Arguments to be passed to bioclim()
#'
#' @export enmtools.bc
#' @export print.enmtools.bc
#' @export summary.enmtools.bc
#' @export plot.enmtools.bc
enmtools.bc <- function(species, env = NA, test.prop = 0, ...){
notes <- NULL
species <- check.bg(species, env, ...)
bc.precheck(species, env)
test.data <- NA
test.evaluation <- NA
env.test.evaluation <- NA
if(test.prop > 0 & test.prop < 1){
test.inds <- sample(1:nrow(species$presence.points), ceiling(nrow(species$presence.points) * test.prop))
test.data <- species$presence.points[test.inds,]
species$presence.points <- species$presence.points[-test.inds,]
}
# This is a very weird hack that has to be done because dismo's evaluate and bioclim function
# fail if the stack only has one layer.
if(length(names(env)) == 1){
oldname <- names(env)
env <- stack(env, env)
env[[2]][!is.na(env[[2]])] <- 0
names(env) <- c(oldname, "dummyvar")
notes <- c(notes, "Only one predictor was provided, so a dummy variable was created in order to be compatible with dismo's prediction function.")
}
this.bc <- bioclim(env, species$presence.points[,1:2])
suitability <- suitability <- predict(env, this.bc, type = "response")
# This is a very weird hack that has to be done because dismo's evaluate function
# fails if the stack only has one layer.
if(length(names(env)) == 1){
oldname <- names(env)
env <- stack(env, env)
names(env) <- c(oldname, "dummyvar")
}
model.evaluation <- evaluate(species$presence.points[,1:2], species$background.points[,1:2],
this.bc, env)
env.model.evaluation <- env.evaluate(species, this.bc, env)
if(test.prop > 0 & test.prop < 1){
test.evaluation <- evaluate(test.data, species$background.points[,1:2],
this.bc, env)
temp.sp <- species
temp.sp$presence.points <- test.data
env.test.evaluation <- env.evaluate(temp.sp, this.bc, env)
}
output <- list(analysis.df = species$presence.points[,1:2],
test.data = test.data,
test.prop = test.prop,
model = this.bc,
training.evaluation = model.evaluation,
test.evaluation = test.evaluation,
env.training.evaluation = env.model.evaluation,
env.test.evaluation = env.test.evaluation,
suitability = suitability,
notes = notes)
class(output) <- c("enmtools.bc", "enmtools.model")
# Doing response plots for each variable.  Doing this bit after creating
# the output object because plot.response expects an enmtools.model object
response.plots <- list()
for(i in names(env)){
response.plots[[i]] <- plot.response(output, env, i)
}
output[["response.plots"]] <- response.plots
return(output)
}
# Summary for objects of class enmtools.bc
summary.enmtools.bc <- function(this.bc){
cat("\n\nData table (top ten lines): ")
print(kable(head(this.bc$analysis.df, 10)))
cat("\n\nModel:  ")
print(this.bc$model)
cat("\n\nModel fit (training data):  ")
print(this.bc$training.evaluation)
cat("\n\nEnvironment space model fit (training data):  ")
print(this.bc$env.training.evaluation)
cat("\n\nProportion of data wittheld for model fitting:  ")
cat(this.bc$test.prop)
cat("\n\nModel fit (test data):  ")
print(this.bc$test.evaluation)
cat("\n\nEnvironment space model fit (test data):  ")
print(this.bc$env.test.evaluation)
cat("\n\nNotes:  \n")
print(this.bc$notes)
cat("\n\nSuitability:  \n")
print(this.bc$suitability)
plot(this.bc)
}
#Print method for objects of class enmtools.bc
print.enmtools.bc <- function(this.bc){
print(summary(this.bc))
}
# Plot method for objects of class enmtools.bc
plot.enmtools.bc <- function(this.bc){
suit.points <- data.frame(rasterToPoints(this.bc$suitability))
colnames(suit.points) <- c("Longitude", "Latitude", "Suitability")
suit.plot <- ggplot(data = suit.points, aes(y = Latitude, x = Longitude)) +
geom_raster(aes(fill = Suitability)) +
scale_fill_viridis(option = "B", guide = guide_colourbar(title = "Suitability")) +
coord_fixed() + theme_classic() +
geom_point(data = this.bc$analysis.df, aes(x = Longitude, y = Latitude),
pch = 21, fill = "white", color = "black", size = 2)
if(!(all(is.na(this.bc$test.data)))){
suit.plot <- suit.plot + geom_point(data = this.bc$test.data, aes(x = Longitude, y = Latitude),
pch = 21, fill = "green", color = "black", size = 2)
}
return(suit.plot)
}
# Checking data for analysis using enmtools.bc
bc.precheck <- function(species, env, f){
### Check to make sure the data we need is there
if(!inherits(species, "enmtools.species")){
stop("Argument \'species\' must contain an enmtools.species object!")
}
check.species(species)
if(!inherits(species$presence.points, "data.frame")){
stop("Species presence.points do not appear to be an object of class data.frame")
}
if(!inherits(env, c("raster", "RasterLayer", "RasterStack", "RasterBrick"))){
stop("No environmental rasters were supplied!")
}
if(ncol(species$presence.points) != 2){
stop("Species presence points do not contain longitude and latitude data!")
}
}
ahli.bc
library(ENMTools)
rm(list = ls(all = TRUE))
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 40000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 40000, n = 1000, mask = env[[1]])
# Should fail because presence and background have different col names
check.species(ahli)
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles <- check.clade(two.anoles)
two.anoles
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(ahli, env, pres ~ layer.1 + layer.2 + layer.3 + layer.4, test.prop = 0.2)
ahli.glm
ahli.glm
summary.enmtools.glm
rm(list = ls(all = TRUE))
summary.enmtools.glm
enmtools.glm
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
summary.enmtools.glm
library(ENMTools)
summary.enmtools.glm
setwd("~/Downloads/R")
library(ENMTools)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 40000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 40000, n = 1000, mask = env[[1]])
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles <- check.clade(two.anoles)
two.anoles
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(ahli, env, pres ~ layer.1 + layer.2 + layer.3 + layer.4, test.prop = 0.2)
ahli.glm
ahli.glm$response.plots
ahli.gam <- enmtools.gam(ahli, env, test.prop = 0.2, k = 10)
ahli.gam
ahli.gam$response.plots
visualize.enm(ahli.gam, env, layers = c("layer.1", "layer.2"))
onevar.glm <- enmtools.glm(ahli, env, pres ~ layer.1, test.prop = 0.2)
onevar.glm
onevar.glm$response.plots
allogus.glm <- enmtools.glm(allogus, env, pres ~ layer.1 + layer.2 + layer.3 + layer.4)
allogus.glm
allogus.glm <- enmtools.glm(allogus, env, pres ~ layer.1 + layer.2 + layer.3 + layer.4, test.prop = 0.3)
allogus.glm
env.plots <- visualize.enm(allogus.glm, env, layers = c("layer.1", "layer.2"))
env.plots
ahli.twovar.glm <- enmtools.glm(ahli, env, pres ~ layer.1 + layer.4)
ahli.twovar.glm
ahli.bc <- enmtools.bc(ahli, env, test.prop = 0.2)
ahli.bc
ahli.bc$response.plots
ahli.bc2 <- enmtools.bc(ahli, env[[c("layer.1", "layer.4")]])
ahli.mx <- enmtools.maxent(ahli, env, test.prop = 0.2)
ahli.mx
ahli.mx$response.plots
allogus.mx <- enmtools.maxent(allogus, env, test.prop = 0.2)
allogus.mx
allogus.mx
allogus.mx$suitability
plot(allogus.mx)
class(allogus.mx)
ahli.mx
allogus.mx$response.plots
allogus.dm <- enmtools.dm(allogus, env, test.prop = 0.2)
allogus.dm
env.evaluate(allogus, allogus.dm, env, "background")
visualize.enm(allogus.dm, env, layers = c("layer.1", "layer.2"))
ahli.dm <- enmtools.dm(ahli, env, test.prop = 0.2)
ahli.dm
ahli.dm$response.plots
allogus.dm <- enmtools.dm(allogus, env)
allogus.dm
raster.cor(allogus.dm, ahli.dm)
raster.cor(ahli.mx, ahli.dm)
plot(raster.standardize(ahli.dm))
raster.breadth(allogus.dm)
raster.overlap(allogus.dm, allogus.dm$suitability)
raster.overlap(ahli.dm, allogus.dm)
raster.resid(ahli.dm, ahli.glm)
plot(raster.resid(ahli.glm, ahli.dm)$residuals)
env.overlap(ahli.dm, ahli.glm, env)
allogus.quad.glm <- enmtools.glm(allogus, env, pres ~ poly(layer.1, 2) + poly(layer.2, 2) + poly(layer.3, 2) + poly(layer.4, 2))
allogus.quad.glm
visualize.enm(allogus.quad.glm, env, 100, layers = c("layer.1", "layer.4"))
ahli.quad.glm <- enmtools.glm(ahli, env, pres ~ poly(layer.1, 1) + poly(layer.2, 2) + poly(layer.3, 2) + poly(layer.4, 2))
ahli.quad.glm
visualize.enm(ahli.quad.glm, env, 100, layers = c("layer.1", "layer.2"))
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 4)
id.gam <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "gam", nreps = 4)
id.mx <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "mx", nreps = 4)
ahli.quad.glm
ahli.quad.glm <- enmtools.glm(ahli, env, pres ~ poly(layer.1, 1) + poly(layer.2, 2) + poly(layer.3, 2) + poly(layer.4, 2), test.prop = 0.2)
visualize.enm(ahli.quad.glm, env, 100, layers = c("layer.1", "layer.2"))
ahli.quad.glm
allogus.quad.glm <- enmtools.glm(allogus, env, pres ~ poly(layer.1, 2) + poly(layer.2, 2) + poly(layer.3, 2) + poly(layer.4, 2), test.prop = 0.2)
allogus.quad.glm
visualize.enm(allogus.quad.glm, env, 100, layers = c("layer.1", "layer.4"))
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.4"))
allogus.mx
allogus.mx$response.plots
allogus.mx <- enmtools.maxent(allogus, env[["layer.1", "layer.4"]], test.prop = 0.2)
allogus.mx
names(env)
allogus.mx <- enmtools.maxent(allogus, env[["layer.1", "layer.3"]], test.prop = 0.2)
allogus.mx <- enmtools.maxent(allogus, env[[c("layer.1", "layer.4")]], test.prop = 0.2)
allogus.mx
allogus.mx$response.plots
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.4"))
allogus.mx
plot(allogus.mx)
install.packages("biomod2")
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.4)
library(ENMTools)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.4)
plot(allogus.glm)
visualize.enm(allogus.glm, env, layers = c("layer.1", "layer.4"))
plot(allogus.mx)
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.4"))
library(enmtools)
library(ENMTools)
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.4"))
allogus.dm <- enmtools.dm(allogus, env[[c("layer.1", "layer.4")]])
visualize.enm(allogus.dm, env, layers = c("layer.1", "layer.4"))
plot(allogus.dm)
allogus.gam <- enmtools.gam(allogus, env[[c("layer.1", "layer.4")]])
plot(allogus.gam)
visualize.enm(allogus.gam, env, layers = c("layer.1", "layer.4"))
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.4, test.prop = 0.2)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.4, test.prop = 0.2)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.4, test.prop = 0.2)
plot(allogus.glm)
allogus.glm$test.evaluation
visualize.enm(allogus.glm, env, layers = c("layer.1", "layer.4"))
allogus.gam <- enmtools.gam(allogus, env[[c("layer.1", "layer.4")]], test.prop = 0.2)
plot(allogus.gam)
allogus.gam$test.evaluation
visualize.enm(allogus.gam, env, layers = c("layer.1", "layer.4"))
allogus.mx <- enmtools.mx(allogus, env[[c("layer.1", "layer.4")]], test.prop = 0.2)
allogus.mx <- enmtools.maxent(allogus, env[[c("layer.1", "layer.4")]], test.prop = 0.2)
plot(allogus.mx)
allogus.mx$test.evaluation
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.4"))
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
plot(allogus.glm)
allogus.glm$test.evaluation
visualize.enm(allogus.glm, env, layers = c("layer.1", "layer.2"))
allogus.gam <- enmtools.gam(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.gam)
allogus.gam$test.evaluation
visualize.enm(allogus.gam, env, layers = c("layer.1", "layer.2"))
allogus.mx <- enmtools.maxent(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.mx)
allogus.mx$test.evaluation
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.2"))
allogus.dm <- enmtools.dm(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.dm)
allogus.dm$test.evaluation
visualize.enm(allogus.dm, env, layers = c("layer.1", "layer.2"))
allogus.bc <- enmtools.bc(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.bc)
allogus.bc$test.evaluation
visualize.enm(allogus.bc, env, layers = c("layer.1", "layer.2"))
plot(allogus)
allogus$background.points <- NA
allogus$range <- NA
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
plot(allogus.glm)
allogus.glm$test.evaluation
visualize.enm(allogus.glm, env, layers = c("layer.1", "layer.2"))
allogus.gam <- enmtools.gam(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.gam)
allogus.gam$test.evaluation
visualize.enm(allogus.gam, env, layers = c("layer.1", "layer.2"))
allogus.mx <- enmtools.maxent(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.mx)
allogus.mx$test.evaluation
visualize.enm(allogus.mx, env, layers = c("layer.1", "layer.2"))
allogus.dm <- enmtools.dm(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.dm)
allogus.dm$test.evaluation
visualize.enm(allogus.dm, env, layers = c("layer.1", "layer.2"))
allogus.bc <- enmtools.bc(allogus, env[[c("layer.1", "layer.2")]], test.prop = 0.2)
plot(allogus.bc)
allogus.bc$test.evaluation
visualize.enm(allogus.bc, env, layers = c("layer.1", "layer.2"))
#' Takes an emtools.species object and adds background points if they're missing. Looks for range raster first, then goes for environmental layers.
#'
#' @param species An enmtools.species object
#' @param env A raster or raster stack of environmental data.
#' @param nback Number of background points to generate, if any
#'
#' @export check.bg
check.bg <- function(species, env = NA, nback = 1000){
check.species(species)
if(!any(c("data.frame") %in% class(species$presence.points))){
stop("Species presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species$background.points))){
# Now we know we need to add data points
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(species$range))){
# Drawing background points from range raster
cat("\n\nNo background points provided, drawing background from range raster.\n\n")
species$background.points <- as.data.frame(randomPoints(species$range, nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
}
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(env))) {
cat("\nNo background points or range raster, drawing background from environmental layers.\n\n")
species$background.points <- as.data.frame(randomPoints(env[[1]], nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
} else {
# No range or env
stop("No background points, range raster, or environmental data of appropriate type!")
}
}
# Background points already exist
return(species)
}
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
#' Takes an emtools.species object and adds background points if they're missing. Looks for range raster first, then goes for environmental layers.
#'
#' @param species An enmtools.species object
#' @param env A raster or raster stack of environmental data.
#' @param nback Number of background points to generate, if any
#'
#' @export check.bg
check.bg <- function(species, env = NA, nback = 1000){
check.species(species)
if(!any(c("data.frame") %in% class(species$presence.points))){
stop("Species presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species$background.points))){
# Now we know we need to add data points
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(species$range))){
# Drawing background points from range raster
cat("\n\nNo background points provided, drawing background from range raster.\n\n")
species$background.points <- as.data.frame(randomPoints(species$range, nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
}
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(env))) {
cat("\nNo background points or range raster, drawing background from environmental layers.\n\n")
species$background.points <- as.data.frame(randomPoints(env[[1]], nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
} else {
# No range or env
stop("No background points, range raster, or environmental data of appropriate type!")
}
}
# Background points already exist
return(species)
}
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
library(ENMTools)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
library(ENMTools)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
setwd("~/GitHub/ENMTools/test")
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
library(ENMTools)
check.bg
rm(check.bc)
rm(check.bg)
remove(check.bg)
remove("check.bg")
check.bg
check.bg <- "dicks"
check.bg
library(ENMTools)
check.bg
library(ENMTools)
check.bg
check.bg
rm(list = ls(all = TRUE))
check.bg
#' Takes an emtools.species object and adds background points if they're missing. Looks for range raster first, then goes for environmental layers.
#'
#' @param species An enmtools.species object
#' @param env A raster or raster stack of environmental data.
#' @param nback Number of background points to generate, if any
#'
#' @export check.bg
check.bg <- function(species, env = NA, nback = 1000){
check.species(species)
if(!any(c("data.frame") %in% class(species$presence.points))){
stop("Species presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species$background.points))){
# Now we know we need to add data points
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(species$range))){
# Drawing background points from range raster
cat("\n\nNo background points provided, drawing background from range raster.\n\n")
species$background.points <- as.data.frame(randomPoints(species$range, nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
}
if(any(c("raster", "RasterLayer", "RasterStack", "RasterBrick") %in% class(env))) {
cat("\nNo background points or range raster, drawing background from environmental layers.\n\n")
species$background.points <- as.data.frame(randomPoints(env[[1]], nback, species$presence.points))
colnames(species$background.points) <- colnames(species$presence.points)
return(species)
} else {
# No range or env
stop("No background points, range raster, or environmental data of appropriate type!")
}
}
# Background points already exist
return(species)
}
check.bg
library(ENMTools)
check.bg
library(ENMTools)
check.bg
.GlobalEnv
library(ENMTools)
setwd("~/GitHub/ENMTools/test")
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
check.bg
library(ENMTools)
check.bg
allogus.glm <- enmtools.glm(allogus, env, f = presence ~ layer.1 + layer.2, test.prop = 0.2)
