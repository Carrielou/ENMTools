empirical.ribbon.model <- enmtools.bc(ribbon, env, ...)
empirical.outside.model <- enmtools.bc(outside, env, ...)
}
if(type == "dm"){
empirical.species.1.model <- enmtools.dm(species.1, env, ...)
empirical.species.2.model <- enmtools.dm(species.2, env, ...)
empirical.ribbon.model <- enmtools.dm(ribbon, env, ...)
empirical.outside.model <- enmtools.dm(outside, env, ...)
}
empirical.overlap.sp1.vs.sp2 <- c(unlist(raster.overlap(empirical.species.1.model, empirical.species.2.model)),
unlist(env.overlap(empirical.species.1.model, empirical.species.2.model, env = env, ...)))
reps.overlap.sp1.vs.sp2 <- empirical.overlap.sp1.vs.sp2
empirical.overlap.sp1.vs.ribbon <- c(unlist(raster.overlap(empirical.species.1.model, empirical.ribbon.model)),
unlist(env.overlap(empirical.species.1.model, empirical.ribbon.model, env = env, ...)))
reps.overlap.sp1.vs.ribbon <- empirical.overlap.sp1.vs.ribbon
empirical.overlap.sp2.vs.ribbon <- c(unlist(raster.overlap(empirical.species.2.model, empirical.ribbon.model)),
unlist(env.overlap(empirical.species.2.model, empirical.ribbon.model, env = env, ...)))
reps.overlap.sp2.vs.ribbon <- empirical.overlap.sp2.vs.ribbon
empirical.overlap.outside.vs.ribbon <- c(unlist(raster.overlap(empirical.outside.model, empirical.ribbon.model)),
unlist(env.overlap(empirical.outside.model, empirical.ribbon.model, env = env, ...)))
reps.overlap.outside.vs.ribbon <- empirical.overlap.outside.vs.ribbon
lines.df <- data.frame(slope = rep(NA, nreps), intercept = rep(NA, nreps), offset = rep(NA, nreps))
cat("\nBuilding replicate models...\n")
keepers <- 0
while(keepers < nreps){
cat(paste("\nReplicate", keepers + 1, "...\n"))
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.ribbon <- ribbon
rep.outside <- outside
angle <- runif(1, min=0, max=pi)
slope <- sin(angle)/cos(angle)
intercept.modifier <- (width/2)/cos(angle)
if(slope < 0){
intercept.modifier <- -(intercept.modifier)
}
part.points <- cbind(combined.presence.points, combined.presence.points[,2] - slope * combined.presence.points[,1])
# Flip a coin to decide whether we're going from top to bottom or other way around
if(rbinom(1,1,0.5) == 0){
part.points <- part.points[order(part.points[,3]),]
} else {
part.points <- part.points[order(part.points[,3], decreasing = TRUE),]
}
# The intercept to split the two into the appropriate sizes should now be
# the mean of the Nth and Nth + 1 values for column 3, where N is the sample size
# of one of the species
intercept <- mean(c(part.points[nrow(species.1$presence.points), 3],
part.points[nrow(species.2$presence.points), 3]))
# Grab ribbon points, pull them out of part.points
ribbon.points <- which(part.points[,3] > (intercept - intercept.modifier) & part.points[,3] < (intercept + intercept.modifier))
rep.ribbon$presence.points <- part.points[ribbon.points,1:2]
part.points <- part.points[-ribbon.points,]
# Putting all remaining points in rep.outside
rep.outside$presence.points <- part.points[,1:2]
# Splitting remaining points in proportion to the relative sample sizes of the empirical data
prop <- nrow(species.1$presence.points)/nrow(species.2$presence.points)
rep.species.1$presence.points <- part.points[1:floor(prop * nrow(part.points)), 1:2]
rep.species.2$presence.points <- part.points[(floor(prop * nrow(part.points)) + 1):nrow(part.points), 1:2]
# Make sure we actually got some ribbon points
if(nrow(rep.ribbon$presence.points) > 1){
keepers <- keepers + 1
} else {
next
}
#       plot(plotraster)
#       abline(intercept, slope)
lines.df[keepers,] <- c(slope, intercept, intercept.modifier)
if(type == "glm"){
rep.species.1.model <- enmtools.glm(f, rep.species.1, env, ...)
rep.species.2.model <- enmtools.glm(f, rep.species.2, env, ...)
rep.ribbon.model <- enmtools.glm(f, rep.ribbon, env, ...)
rep.outside.model <- enmtools.glm(f, rep.outside, env, ...)
}
if(type == "mx"){
rep.species.1.model <- enmtools.maxent(rep.species.1, env, ...)
rep.species.2.model <- enmtools.maxent(rep.species.2, env, ...)
rep.ribbon.model <- enmtools.maxent(rep.ribbon, env, ...)
rep.outside.model <- enmtools.maxent(rep.outside, env, ...)
}
if(type == "bc"){
rep.species.1.model <- enmtools.bc(rep.species.1, env, ...)
rep.species.2.model <- enmtools.bc(rep.species.2, env, ...)
rep.ribbon.model <- enmtools.bc(rep.ribbon, env, ...)
rep.outside.model <- enmtools.bc(rep.outside, env, ...)
}
if(type == "dm"){
rep.species.1.model <- enmtools.dm(rep.species.1, env, ...)
rep.species.2.model <- enmtools.dm(rep.species.2, env, ...)
rep.ribbon.model <- enmtools.dm(rep.ribbon, env, ...)
rep.outside.model <- enmtools.dm(rep.outside, env, ...)
}
# Appending models to replicates list
replicate.models[[paste0(species.1$species.name, ".rep.", keepers)]] <- rep.species.1.model
replicate.models[[paste0(species.2$species.name, ".rep.", keepers)]] <- rep.species.2.model
replicate.models[[paste0("ribbon.rep.", keepers)]] <- rep.ribbon.model
replicate.models[[paste0("outside.rep.", keepers)]] <- rep.outside.model
# Measure overlaps
reps.overlap.sp1.vs.sp2 <- rbind(reps.overlap.sp1.vs.sp2, c(unlist(raster.overlap(rep.species.1.model, rep.species.2.model)),
unlist(env.overlap(rep.species.1.model, rep.species.2.model, env = env, ...))))
reps.overlap.sp1.vs.ribbon <- rbind(reps.overlap.sp1.vs.ribbon, c(unlist(raster.overlap(rep.species.1.model, rep.ribbon.model)),
unlist(env.overlap(rep.species.1.model, rep.ribbon.model, env = env, ...))))
reps.overlap.sp2.vs.ribbon <- rbind(reps.overlap.sp2.vs.ribbon, c(unlist(raster.overlap(rep.species.2.model, rep.ribbon.model)),
unlist(env.overlap(rep.species.2.model, rep.ribbon.model, env = env, ...))))
reps.overlap.outside.vs.ribbon <- rbind(reps.overlap.outside.vs.ribbon, c(unlist(raster.overlap(rep.outside.model, rep.ribbon.model)),
unlist(env.overlap(rep.outside.model, rep.ribbon.model, env = env, ...))))
}
rownames(reps.overlap.sp1.vs.sp2) <- c("empirical", paste("rep", 1:nreps))
rownames(reps.overlap.sp1.vs.ribbon) <- c("empirical", paste("rep", 1:nreps))
rownames(reps.overlap.sp2.vs.ribbon) <- c("empirical", paste("rep", 1:nreps))
rownames(reps.overlap.outside.vs.ribbon) <- c("empirical", paste("rep", 1:nreps))
p.values.sp1.vs.sp2 <- apply(reps.overlap.sp1.vs.sp2, 2, function(x) 1 - mean(x > x[1], na.rm=FALSE))
p.values.sp1.vs.ribbon <- apply(reps.overlap.sp1.vs.ribbon, 2, function(x) 1 - mean(x > x[1], na.rm=FALSE))
p.values.sp2.vs.ribbon <- apply(reps.overlap.sp2.vs.ribbon, 2, function(x) 1 - mean(x > x[1], na.rm=FALSE))
p.values.outside.vs.ribbon <- apply(reps.overlap.outside.vs.ribbon, 2, function(x) 1 - mean(x > x[1], na.rm=FALSE))
### Plots for sp1 vs sp2
d.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
i.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
cor.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
env.d.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"env.D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"env.D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
env.i.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"env.I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"env.I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
env.cor.plot.sp1.vs.sp2 <- qplot(reps.overlap.sp1.vs.sp2[2:nrow(reps.overlap.sp1.vs.sp2),"env.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.sp2[1,"env.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs.", species.2$species.name))
### Plots for sp1 vs ribbon
d.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
i.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
cor.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
env.d.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"env.D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"env.D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
env.i.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"env.I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"env.I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
env.cor.plot.sp1.vs.ribbon <- qplot(reps.overlap.sp1.vs.ribbon[2:nrow(reps.overlap.sp1.vs.ribbon),"env.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp1.vs.ribbon[1,"env.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.1$species.name, "vs. ribbon"))
### Plots for sp2 vs ribbon
d.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
i.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
cor.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
env.d.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"env.D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"env.D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
env.i.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"env.I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"env.I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
env.cor.plot.sp2.vs.ribbon <- qplot(reps.overlap.sp2.vs.ribbon[2:nrow(reps.overlap.sp2.vs.ribbon),"env.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.sp2.vs.ribbon[1,"env.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation, Environmental Space") +
ggtitle(paste("Rangebreak test:", species.2$species.name, "vs. ribbon"))
### Plots for outside vs ribbon
d.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
i.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
cor.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
env.d.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"env.D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"env.D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D, Environmental Space") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
env.i.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"env.I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"env.I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I, Environmental Space") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
env.cor.plot.outside.vs.ribbon <- qplot(reps.overlap.outside.vs.ribbon[2:nrow(reps.overlap.outside.vs.ribbon),"env.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap.outside.vs.ribbon[1,"env.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation, Environmental Space") +
ggtitle(paste("Rangebreak test: outside vs. ribbon"))
output <- list(description = paste("\n\nribbon rangebreak test", species.1$species.name, "vs.", species.2$species.name),
reps.overlap.sp1.vs.sp2 = reps.overlap.sp1.vs.sp2,
reps.overlap.sp1.vs.ribbon = reps.overlap.sp1.vs.ribbon,
reps.overlap.sp2.vs.ribbon = reps.overlap.sp2.vs.ribbon,
reps.overlap.outside.vs.ribbon = reps.overlap.outside.vs.ribbon,
p.values.sp1.vs.sp2 = p.values.sp1.vs.sp2,
p.values.sp1.vs.ribbon = p.values.sp1.vs.ribbon,
p.values.sp2.vs.ribbon = p.values.sp2.vs.ribbon,
p.values.outside.vs.ribbon = p.values.outside.vs.ribbon,
empirical.species.1.model = empirical.species.1.model,
empirical.species.2.model = empirical.species.2.model,
empirical.ribbon.model = empirical.ribbon.model,
empirical.outside.model = empirical.outside.model,
replicate.models = replicate.models,
lines.df = lines.df,
d.plot.sp1.vs.sp2 = d.plot.sp1.vs.sp2,
i.plot.sp1.vs.sp2 = i.plot.sp1.vs.sp2,
cor.plot.sp1.vs.sp2 = cor.plot.sp1.vs.sp2,
env.d.plot.sp1.vs.sp2 = env.d.plot.sp1.vs.sp2,
env.i.plot.sp1.vs.sp2 = env.i.plot.sp1.vs.sp2,
env.cor.plot.sp1.vs.sp2 = env.cor.plot.sp1.vs.sp2,
d.plot.sp1.vs.ribbon = d.plot.sp1.vs.ribbon,
i.plot.sp1.vs.ribbon = i.plot.sp1.vs.ribbon,
cor.plot.sp1.vs.ribbon = cor.plot.sp1.vs.ribbon,
env.d.plot.sp1.vs.ribbon = env.d.plot.sp1.vs.ribbon,
env.i.plot.sp1.vs.ribbon = env.i.plot.sp1.vs.ribbon,
env.cor.plot.sp1.vs.ribbon = env.cor.plot.sp1.vs.ribbon,
d.plot.sp2.vs.ribbon = d.plot.sp2.vs.ribbon,
i.plot.sp2.vs.ribbon = i.plot.sp2.vs.ribbon,
cor.plot.sp2.vs.ribbon = cor.plot.sp2.vs.ribbon,
env.d.plot.sp2.vs.ribbon = env.d.plot.sp2.vs.ribbon,
env.i.plot.sp2.vs.ribbon = env.i.plot.sp2.vs.ribbon,
env.cor.plot.sp2.vs.ribbon = env.cor.plot.sp2.vs.ribbon,
d.plot.outside.vs.ribbon = d.plot.outside.vs.ribbon,
i.plot.outside.vs.ribbon = i.plot.outside.vs.ribbon,
cor.plot.outside.vs.ribbon = cor.plot.outside.vs.ribbon,
env.d.plot.outside.vs.ribbon = env.d.plot.outside.vs.ribbon,
env.i.plot.outside.vs.ribbon = env.i.plot.outside.vs.ribbon,
env.cor.plot.outside.vs.ribbon = env.cor.plot.outside.vs.ribbon)
class(output) <- "rangebreak.ribbon"
return(output)
}
rangebreak.ribbon.precheck <- function(species.1, species.2, ribbon, env, type, f, width, nreps){
if(!inherits(species.1, "enmtools.species")){
stop("Species.1 is not an enmtools.species object!")
}
if(!inherits(species.2, "enmtools.species")){
stop("Species.2 is not an enmtools.species object!")
}
if(!inherits(ribbon, "enmtools.species")){
stop("Ribbon is not an enmtools.species object!")
}
if(!inherits(env, c("raster", "RasterLayer", "RasterStack", "RasterBrick"))){
stop("Environmental layers are not a RasterLayer or RasterStack object!")
}
if(type == "glm"){
if(is.null(f)){
stop("Type is set to GLM and no formula has been supplied!")
}
if(!inherits(f, "formula")){
stop("Type is set to GLM and f is not a formula object!")
}
}
if(!type %in% c("glm", "mx", "bc", "dm")){
stop(paste("Model type", type, "not understood! Select either bc, dm, mx, or glm."))
}
check.species(species.1)
if(!inherits(species.1$presence.points, "data.frame")){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!inherits(species.1$background.points, "data.frame")){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
check.species(species.2)
if(!inherits(species.2$presence.points, "data.frame")){
stop("Species 2 presence.points do not appear to be an object of class data.frame")
}
if(!inherits(species.2$background.points, "data.frame")){
stop("Species 2 background.points do not appear to be an object of class data.frame")
}
check.species(ribbon)
if(!inherits(ribbon$presence.points, "data.frame")){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!inherits(ribbon$background.points, "data.frame")){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
if(any(!colnames(species.1$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(any(!colnames(species.1$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
if(any(!colnames(ribbon$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
if(any(!colnames(ribbon$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(is.na(species.1$species.name)){
stop("Species 1 does not have a species.name set!")
}
if(is.na(species.2$species.name)){
stop("Species 2 does not have a species.name set!")
}
if(is.na(ribbon$species.name)){
stop("Ribbon does not have a species.name set!  I suggest naming it 'ribbon' to avoid confusion.")
}
if(!inherits(width, "numeric")){
stop("Barrier width is not numeric!")
}
if(!inherits(nreps, "numeric")){
stop("Argument nreps is not numeric!")
}
}
summary.rangebreak.ribbon <- function(rb){
cat(paste("\n\n", rb$description))
cat("\n\nrangebreak test p-values...\n")
cat("\nSpecies 1 vs. Species 2:\n")
print(rb$p.values.sp1.vs.sp2)
cat("\nSpecies 1 vs. Ribbon:\n")
print(rb$p.values.sp1.vs.ribbon)
cat("\nSpecies 2 vs. Ribbon:\n")
print(rb$p.values.sp2.vs.ribbon)
cat("\nOutside vs. Ribbon:\n")
print(rb$p.values.outside.vs.ribbon)
cat("\n\nReplicates:\n")
cat("\nSpecies 1 vs. Species 2:\n")
print(rb$reps.overlap.sp1.vs.sp2)
cat("\nSpecies 1 vs. Ribbon:\n")
print(rb$reps.overlap.sp1.vs.ribbon)
cat("\nSpecies 2 vs. Ribbon:\n")
print(rb$reps.overlap.sp2.vs.ribbon)
cat("\nOutside vs. Ribbon:\n")
print(rb$reps.overlap.outside.vs.ribbon)
plot(rb)
}
print.rangebreak.ribbon <- function(rb){
summary(rb)
}
plot.rangebreak.ribbon <- function(rb){
#   rb.raster <- rb$empirical.species.1.model$suitability
#   rb.raster[!is.na(rb.raster)] <- 1
#   plot(rb.raster)
#   for(i in 1:nrow(rb$lines.df)){
#     abline(rb$lines.df[i,2], rb$lines.df[i,1])
#   }
grid.arrange(rb$d.plot.sp1.vs.sp2, rb$env.d.plot.sp1.vs.sp2,
rb$i.plot.sp1.vs.sp2, rb$env.i.plot.sp1.vs.sp2,
rb$cor.plot.sp1.vs.sp2, rb$env.cor.plot.sp1.vs.sp2, ncol = 2)
grid.arrange(rb$d.plot.sp1.vs.ribbon, rb$env.d.plot.sp1.vs.ribbon,
rb$i.plot.sp1.vs.ribbon, rb$env.i.plot.sp1.vs.ribbon,
rb$cor.plot.sp1.vs.ribbon, rb$env.cor.plot.sp1.vs.ribbon, ncol = 2)
grid.arrange(rb$d.plot.sp2.vs.ribbon, rb$env.d.plot.sp2.vs.ribbon,
rb$i.plot.sp2.vs.ribbon, rb$env.i.plot.sp2.vs.ribbon,
rb$cor.plot.sp2.vs.ribbon, rb$env.cor.plot.sp2.vs.ribbon, ncol = 2)
grid.arrange(rb$d.plot.outside.vs.ribbon, rb$env.d.plot.outside.vs.ribbon,
rb$i.plot.outside.vs.ribbon, rb$env.i.plot.outside.vs.ribbon,
rb$cor.plot.outside.vs.ribbon, rb$env.cor.plot.outside.vs.ribbon, ncol = 2)
}
library(ENMTools)
library(ENMTools)
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.3, nreps = 19)
rbr
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.3, nreps = 19, cor.method = "spearman")
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 20000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 20000, n = 1000, mask = env[[1]])
# Should fail because presence and background have different col names
check.species(ahli)
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles
check.clade(two.anoles)
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env, test.prop = 0.2)
ahli.glm
ahli.glm
ahli.glm$response.plots
onevar.glm <- enmtools.glm(pres ~ layer.1, ahli, env, test.prop = 0.2)
onevar.glm
onevar.glm$response.plots
help(env.overlap)
rbl.glm <- rangebreak.linear(ahli, allogus, env, type = "bc", f = pres ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 4)
knit(input="Readme.Rmd", output = "readme.md")
setwd("~/GitHub/ENMTools/test")
knit(input="Readme.Rmd", output = "readme.md")
setwd("~/GitHub/ENMTools/")
knit(input="Readme.Rmd", output = "readme.md")
rbl.glm
rbl.glm$replicate.models
.
knit(input="Readme.Rmd", output = "readme.md")
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 20000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 20000, n = 1000, mask = env[[1]])
# Should fail because presence and background have different col names
check.species(ahli)
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles
check.clade(two.anoles)
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env, test.prop = 0.2)
ahli.glm
ahli.glm$response.plots
onevar.glm <- enmtools.glm(pres ~ layer.1, ahli, env, test.prop = 0.2)
onevar.glm
onevar.glm$response.plots
allogus.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, allogus, env)
allogus.glm
ahli.twovar.glm <- enmtools.glm(pres ~ layer.1 + layer.4, ahli, env)
ahli.twovar.glm
# Presently leaving out GAM, as it is hard to see how I'm going to be able to
# use it in the same way as the other methods.
# Might eventually write a function to parse GLM-style functions to a GAMmable function
# ahli.gam <- enmtools.gam(presence ~, ahli, env)
ahli.bc <- enmtools.bc(ahli, env, test.prop = 0.2)
ahli.bc
ahli.bc$response.plots
ahli.bc2 <- enmtools.bc(ahli, env[[c("layer.1", "layer.4")]])
ahli.mx <- enmtools.maxent(ahli, env, test.prop = 0.2)
ahli.mx
ahli.mx$response.plots
ahli.dm <- enmtools.dm(ahli, env, test.prop = 0.2)
ahli.dm
ahli.dm$response.plots
allogus.dm <- enmtools.dm(allogus, env)
allogus.dm
raster.cor(allogus.dm, ahli.dm)
raster.cor(ahli.mx, ahli.dm)
plot(raster.standardize(ahli.dm))
raster.breadth(allogus.dm)
raster.overlap(allogus.dm, allogus.dm$suitability)
raster.overlap(ahli.dm, allogus.dm)
raster.resid(ahli.dm, ahli.glm)
plot(raster.resid(ahli.glm, ahli.dm)$residuals)
env.overlap(ahli.dm, ahli.glm, env)
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.5, nreps = 4)
ribbon <- enmtools.species(species.name = "ribbon")
ribbon$presence.points <- data.frame(Longitude = runif(n = 10, min = -79, max = -78.5),
Latitude = runif(n = 10, min = 21.7, max = 22.1))
plot(env[[1]])
points(ribbon$presence.points)
ribbon$range <- background.raster.buffer(ribbon$presence.points, 20000, mask = env)
ribbon
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.5, nreps = 4)
library(ENMTools)
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.5, nreps = 4)
library(ENMTools)
rbr <- rangebreak.ribbon(ahli, allogus, ribbon, env, type = "dm", width = 0.5, nreps = 4)
install.packages("cranlogs")
library(cranlogs)
rwty.df <- cran_downloads(package = "rwty")
rwty.df
rwty.df <- cran_downloads(package = "rwty", from = "2016-06-01", to = "2014-07-28")
rwty.df <- cran_downloads(package = "rwty", from = "2016-06-01", to = "2016-07-28")
rwty.df
rwty.df <- cran_downloads(package = "dismo", from = "2016-06-01", to = "2016-07-28")
rwty.df
rwty.df <- cran_downloads(package = "rwty", from = "2016-06-01", to = "2016-07-28")
rwty.df
