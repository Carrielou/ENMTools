ncells <- sum(!is.na(getValues(x)))
B1 <- (1/cellStats(x^2, sum) - 1)/(ncells - 1)
B2 <- 0 - cellStats(x * log(x), sum)/log(ncells)
results <- list(B1 = B1, B2 = B2)
return(results)
}
raster.breadth(ahli.glm)
#' raster.breadth, applies measures of niche breadth to an ENM
#'
#' This function measures the spatial heterogeneity of the distribution of suitability
#' scores from an ENM.  It returns Levins' two metrics of niche breadth.
#'
#' @param x An object of class raster or RasterLayer, or an ENMTools model object containing a suitability raster.
#' @param verbose Controls printing of diagnostic messages
#'
#' @return results A vector containing the two metrics
#'
#' @keywords keywords
#'
#' @export raster.breadth
#'
#' @examples
#' raster.breadth("env[[1]]")
raster.breadth <- function(x, verbose=FALSE){
if(any(grepl("enmtools", class(x)))){
x <- x$suitability
}
if(verbose){print(paste("Starting breadth on", x, "at", Sys.time()))}
x <- raster.standardize(x)
x[which(getValues(x) == 0)] <- 1e-40
ncells <- sum(!is.na(getValues(x)))
B1 <- (1/cellStats(x^2, sum) - 1)/(ncells - 1)
B2 <- 0 - cellStats(x * log(x), sum)/log(ncells)
results <- list(B1 = B1, B2 = B2)
return(results)
}
raster.breadth(ahli.glm)
library(ENMTools)
knit(input="Readme.Rmd", output = "readme.md")
knit(input="Readme.Rmd", output = "readme.md")
id.glm
library(ENMTools)
env.files <- list.files(path = "test/testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
ahli <- enmtools.species()
ahli
names(ahli)
ahli$species.name <- "ahli"
ahli$presence.points <- read.csv("test/testdata/ahli.csv")[,3:4]
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,
radius = 20000, n = 1000, mask = env[[1]])
ahli
allogus <- enmtools.species(species.name = "allogus",
presence.points = read.csv("test/testdata/allogus.csv")[,3:4])
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
allogus$background.points <- background.points.buffer(points = allogus$presence.points,
radius = 20000, n = 1000, mask = env[[1]])
allogus
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env)
allogus.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, allogus, env)
ahli.glm
raster.breadth(ahli.glm)
raster.overlap(ahli.glm, allogus.glm)
ahli.glm
plot(ahli.glm)
plot(ahli.glm$suitability)
plot(allogus.glm$suitability)
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 4)
id.glm
id.glm
rm(list=ls(all=TRUE))
knit(input="Readme.Rmd", output = "readme.md")
knit(input="Readme.Rmd", output = "readme.md")
knit(input="Readme.Rmd", output = "readme.md")
knit(input="Readme.Rmd", output = "readme.md")
knit(input="Readme.Rmd", output = "readme.md")
help(enmtools.glm)
ahli.glm
allogus.glm
raster.overlap(ahli.glm, allogus.glm)
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env)
allogus.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, allogus, env)
raster.overlap(ahli.glm, allogus.glm)
raster.overlap(allogus.glm, ahli.glm)
id.glm
raster.overlap(id.glm$empirical.species.1.model, id.glm$empirical.species.2.model)
id.glm$empirical.species.1.model
id.glm$empirical.species.2.model
bg.glm
knit(input="Readme.Rmd", output = "readme.md")
ahli.bc <- enmtools.bc(species = ahli, env = env)
names(id.glm)
help(ENMTools)
??ENMTools
library(ENMTools)
raster.cor.matrix(env)
raster.cor.matrix(env, method = "spearman")
#' identity.test Conduct a niche identity/equivalency test as described in Warren et al. 2008.
#'
#'
#' @param species.1 An emtools.species object
#' @param species.2 An enmtools.species object
#' @param env A RasterLayer or RasterStack object containing environmental data
#' @param type The type of model to construct, currently accepts "glm", "mx", "bc", or "dm"
#' @param f A function to use for model fitting.  Only required for GLM models at the moment.
#' @param nreps Number of replicates to perform
#' @param ... Additional arguments to be passed to model fitting functions.
#'
#' @return results A list containing a replicates, models for the empirical data, and summary statistics and plots.
#'
#' @keywords identity, equivalency, enmtools, hypothesis testing
#'
#' @export identity.test
#' @export identity.precheck
#' @export print.identity.test
#' @export summary.identity.test
#' @export plot.identity.test
#'
#' @examples
#' identity.test(ahli, allogus, env, type = "glm", f = layer.1 + layer.2 + layer.3, nreps = 10, ...)
#'
identity.test <- function(species.1, species.2, env, type, f = NULL, nreps = 99, ...){
identity.precheck(species.1, species.2, env, type, f, nreps)
# Initialize a list to store reps in
replicate.models <- list()
# For starters we need to combine species background points so that each model
# is being built with the same background
species.1$background.points <- rbind(species.1$background.points, species.2$background.points)
species.2$background.points <- rbind(species.1$background.points, species.2$background.points)
combined.presence.points <- rbind(species.1$presence.points, species.2$presence.points)
# Build models for empirical data
cat("\nBuilding empirical models...\n")
if(type == "glm"){
empirical.species.1.model <- enmtools.glm(f, species.1, env, ...)
empirical.species.2.model <- enmtools.glm(f, species.2, env, ...)
}
if(type == "mx"){
empirical.species.1.model <- enmtools.maxent(species.1, env, ...)
empirical.species.2.model <- enmtools.maxent(species.2, env, ...)
}
if(type == "bc"){
empirical.species.1.model <- enmtools.bc(species.1, env, ...)
empirical.species.2.model <- enmtools.bc(species.2, env, ...)
}
if(type == "dm"){
empirical.species.1.model <- enmtools.dm(species.1, env, ...)
empirical.species.2.model <- enmtools.dm(species.2, env, ...)
}
empirical.overlap <- raster.overlap(empirical.species.1.model, empirical.species.2.model)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
# Building models for reps
if(type == "glm"){
rep.species.1.model <- enmtools.glm(f, rep.species.1, env, ...)
rep.species.2.model <- enmtools.glm(f, rep.species.2, env, ...)
}
if(type == "mx"){
rep.species.1.model <- enmtools.maxent(rep.species.1, env, ...)
rep.species.2.model <- enmtools.maxent(rep.species.2, env, ...)
}
if(type == "bc"){
rep.species.1.model <- enmtools.bc(rep.species.1, env, ...)
rep.species.2.model <- enmtools.bc(rep.species.2, env, ...)
}
if(type == "dm"){
rep.species.1.model <- enmtools.dm(rep.species.1, env, ...)
rep.species.2.model <- enmtools.dm(rep.species.2, env, ...)
}
# Appending models to replicates list
replicate.models[[paste0(species.1$species.name, ".rep.", i)]] <- rep.species.1.model
replicate.models[[paste0(species.2$species.name, ".rep.", i)]] <- rep.species.2.model
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.glm, rep.species.2.glm)))
}
rownames(reps.overlap) <- c("empirical", paste("rep", 1:nreps))
p.values <- apply(reps.overlap, 2, function(x) 1 - mean(x > x[1]))
d.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
i.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
cor.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
# mean(id.dm[,1] > id.dm[1,1])
output <- list(description = paste("\n\nIdentity test", species.1$species.name, "vs.", species.2$species.name),
reps.overlap = reps.overlap,
p.values = p.values,
empirical.species.1.model = empirical.species.1.model,
empirical.species.2.model = empirical.species.2.model,
replicate.models = replicate.models,
d.plot = d.plot,
i.plot = i.plot,
cor.plot = cor.plot)
class(output) <- "identity.test"
return(output)
}
identity.precheck <- function(species.1, species.2, env, type, f, nreps){
if(!"enmtools.species" %in% class(species.1)){
stop("Species.1 is not an enmtools.species object!")
}
if(!"enmtools.species" %in% class(species.2)){
stop("Species.2 is not an enmtools.species object!")
}
if(!grepl("Raster", class(env))){
stop("Environmental layers are not a RasterLayer or RasterStack object!")
}
if(type == "glm"){
if(is.null(f)){
stop("Type is set to GLM and no formula has been supplied!")
}
if(!"formula" %in% class(f)){
stop("Type is set to GLM and f is not a formula object!")
}
}
if(!type %in% c("glm", "mx", "bc", "dm")){
stop(paste("Model type", type, "not understood! Select either bc, dm, mx, or glm."))
}
check.species(species.1)
if(!any(c("data.frame") %in% class(species.1$presence.points))){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.1$background.points))){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
check.species(species.2)
if(!any(c("data.frame") %in% class(species.2$presence.points))){
stop("Species 2 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.2$background.points))){
stop("Species 2 background.points do not appear to be an object of class data.frame")
}
if(any(!colnames(species.1$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(any(!colnames(species.1$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
if(is.na(species.1$species.name)){
stop("Species 1 does not have a species.name set!")
}
if(is.na(species.2$species.name)){
stop("Species 2 does not have a species.name set!")
}
}
summary.identity.test <- function(id){
cat(paste("\n\n", id$description))
cat("\n\nIdentity test p-values:\n")
print(id$p.values)
cat("\n\nReplicates:\n")
print(kable(head(id$reps.overlap)))
plot(id)
}
print.identity.test <- function(id){
summary(id)
}
plot.identity.test <- function(id){
grid.arrange(id$d.plot, id$i.plot, id$cor.plot)
}
rm(list = ls(all = TUE))
rm(list = ls(all = TRUE))
library(ENMTools)
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
# This code builds the readme.rmd file into a regular md file, which GitHub understands better
knit(input="Readme.Rmd", output = "readme.md")
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 20000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 20000, n = 1000, mask = env[[1]])
# Should fail because presence and background have different col names
check.species(ahli)
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles
check.clade(two.anoles)
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env)
ahli.glm
allogus.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, allogus, env)
allogus.glm
ahli.twovar.glm <- enmtools.glm(pres ~ layer.1 + layer.4, ahli, env)
ahli.twovar.glm
# Presently leaving out GAM, as it is hard to see how I'm going to be able to
# use it in the same way as the other methods.
# ahli.gam <- enmtools.gam(presence ~, ahli, env)
ahli.bc <- enmtools.bc(ahli, env)
ahli.bc2 <- enmtools.bc(ahli, env[[c("layer.1", "layer.4")]])
ahli.mx <- enmtools.maxent(ahli, env)
ahli.mx
ahli.dm <- enmtools.dm(ahli, env)
ahli.dm
allogus.dm <- enmtools.dm(allogus, env)
allogus.dm
raster.cor(allogus.dm, ahli.dm)
raster.cor(ahli.mx, ahli.dm)
plot(raster.standardize(ahli.dm))
raster.breadth(allogus.dm)
raster.overlap(allogus.dm, allogus.dm$suitability)
raster.overlap(ahli.dm, allogus.dm)
raster.resid(ahli.mx, ahli.dm)
plot(raster.resid(ahli.mx, ahli.dm)$residuals)
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 4)
id.mx <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "mx", nreps = 4)
id.bc <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "bc", nreps = 4)
#' identity.test Conduct a niche identity/equivalency test as described in Warren et al. 2008.
#'
#'
#' @param species.1 An emtools.species object
#' @param species.2 An enmtools.species object
#' @param env A RasterLayer or RasterStack object containing environmental data
#' @param type The type of model to construct, currently accepts "glm", "mx", "bc", or "dm"
#' @param f A function to use for model fitting.  Only required for GLM models at the moment.
#' @param nreps Number of replicates to perform
#' @param ... Additional arguments to be passed to model fitting functions.
#'
#' @return results A list containing a replicates, models for the empirical data, and summary statistics and plots.
#'
#' @keywords identity, equivalency, enmtools, hypothesis testing
#'
#' @export identity.test
#' @export identity.precheck
#' @export print.identity.test
#' @export summary.identity.test
#' @export plot.identity.test
#'
#' @examples
#' identity.test(ahli, allogus, env, type = "glm", f = layer.1 + layer.2 + layer.3, nreps = 10, ...)
#'
identity.test <- function(species.1, species.2, env, type, f = NULL, nreps = 99, ...){
identity.precheck(species.1, species.2, env, type, f, nreps)
# Initialize a list to store reps in
replicate.models <- list()
# For starters we need to combine species background points so that each model
# is being built with the same background
species.1$background.points <- rbind(species.1$background.points, species.2$background.points)
species.2$background.points <- rbind(species.1$background.points, species.2$background.points)
combined.presence.points <- rbind(species.1$presence.points, species.2$presence.points)
# Build models for empirical data
cat("\nBuilding empirical models...\n")
if(type == "glm"){
empirical.species.1.model <- enmtools.glm(f, species.1, env, ...)
empirical.species.2.model <- enmtools.glm(f, species.2, env, ...)
}
if(type == "mx"){
empirical.species.1.model <- enmtools.maxent(species.1, env, ...)
empirical.species.2.model <- enmtools.maxent(species.2, env, ...)
}
if(type == "bc"){
empirical.species.1.model <- enmtools.bc(species.1, env, ...)
empirical.species.2.model <- enmtools.bc(species.2, env, ...)
}
if(type == "dm"){
empirical.species.1.model <- enmtools.dm(species.1, env, ...)
empirical.species.2.model <- enmtools.dm(species.2, env, ...)
}
empirical.overlap <- raster.overlap(empirical.species.1.model, empirical.species.2.model)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
# Building models for reps
if(type == "glm"){
rep.species.1.model <- enmtools.glm(f, rep.species.1, env, ...)
rep.species.2.model <- enmtools.glm(f, rep.species.2, env, ...)
}
if(type == "mx"){
rep.species.1.model <- enmtools.maxent(rep.species.1, env, ...)
rep.species.2.model <- enmtools.maxent(rep.species.2, env, ...)
}
if(type == "bc"){
rep.species.1.model <- enmtools.bc(rep.species.1, env, ...)
rep.species.2.model <- enmtools.bc(rep.species.2, env, ...)
}
if(type == "dm"){
rep.species.1.model <- enmtools.dm(rep.species.1, env, ...)
rep.species.2.model <- enmtools.dm(rep.species.2, env, ...)
}
# Appending models to replicates list
replicate.models[[paste0(species.1$species.name, ".rep.", i)]] <- rep.species.1.model
replicate.models[[paste0(species.2$species.name, ".rep.", i)]] <- rep.species.2.model
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.model, rep.species.2.model)))
}
rownames(reps.overlap) <- c("empirical", paste("rep", 1:nreps))
p.values <- apply(reps.overlap, 2, function(x) 1 - mean(x > x[1]))
d.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"D"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"D"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("D") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
i.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"I"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"I"], linetype = "longdash") +
xlim(0,1) + guides(fill = FALSE, alpha = FALSE) + xlab("I") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
cor.plot <- qplot(reps.overlap[2:nrow(reps.overlap),"rank.cor"], geom = "density", fill = "density", alpha = 0.5) +
geom_vline(xintercept = reps.overlap[1,"rank.cor"], linetype = "longdash") +
xlim(-1,1) + guides(fill = FALSE, alpha = FALSE) + xlab("Rank Correlation") +
ggtitle(paste("Identity test:", species.1$species.name, "vs.", species.2$species.name))
# mean(id.dm[,1] > id.dm[1,1])
output <- list(description = paste("\n\nIdentity test", species.1$species.name, "vs.", species.2$species.name),
reps.overlap = reps.overlap,
p.values = p.values,
empirical.species.1.model = empirical.species.1.model,
empirical.species.2.model = empirical.species.2.model,
replicate.models = replicate.models,
d.plot = d.plot,
i.plot = i.plot,
cor.plot = cor.plot)
class(output) <- "identity.test"
return(output)
}
identity.precheck <- function(species.1, species.2, env, type, f, nreps){
if(!"enmtools.species" %in% class(species.1)){
stop("Species.1 is not an enmtools.species object!")
}
if(!"enmtools.species" %in% class(species.2)){
stop("Species.2 is not an enmtools.species object!")
}
if(!grepl("Raster", class(env))){
stop("Environmental layers are not a RasterLayer or RasterStack object!")
}
if(type == "glm"){
if(is.null(f)){
stop("Type is set to GLM and no formula has been supplied!")
}
if(!"formula" %in% class(f)){
stop("Type is set to GLM and f is not a formula object!")
}
}
if(!type %in% c("glm", "mx", "bc", "dm")){
stop(paste("Model type", type, "not understood! Select either bc, dm, mx, or glm."))
}
check.species(species.1)
if(!any(c("data.frame") %in% class(species.1$presence.points))){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.1$background.points))){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
check.species(species.2)
if(!any(c("data.frame") %in% class(species.2$presence.points))){
stop("Species 2 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.2$background.points))){
stop("Species 2 background.points do not appear to be an object of class data.frame")
}
if(any(!colnames(species.1$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(any(!colnames(species.1$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
if(is.na(species.1$species.name)){
stop("Species 1 does not have a species.name set!")
}
if(is.na(species.2$species.name)){
stop("Species 2 does not have a species.name set!")
}
}
summary.identity.test <- function(id){
cat(paste("\n\n", id$description))
cat("\n\nIdentity test p-values:\n")
print(id$p.values)
cat("\n\nReplicates:\n")
print(kable(head(id$reps.overlap)))
plot(id)
}
print.identity.test <- function(id){
summary(id)
}
plot.identity.test <- function(id){
grid.arrange(id$d.plot, id$i.plot, id$cor.plot)
}
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 4)
id.mx <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "mx", nreps = 4)
id.bc <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "bc", nreps = 4)
id.glm
id.bc
id.dm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "dm", nreps = 4)
id.dm
id.dm$replicate.models$ahli.rep.1
help(dismo)
rm(list = ls())
rm(list = ls(all = TRUE))
