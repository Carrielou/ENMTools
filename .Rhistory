return(results)
}
}
raster.cor(env[[1]], env[[2]])
raster.overlap(env[[1]], env[[2]])
library(ENMTools)
test1 <- getValues(env[[1]])
test2 <- getValues(env[[2]])
test3 <- lm(test1 ~ test2)
test3$residuals
test3 <- lm(test1 ~ test2)$residuals
dim(test3)
length(test3)
test4 <- test2
test4(!is.na(test4)) <- test3
test4[!is.na(test4)] <- test3
plot(test4)
test4 <- test2
plot(test4)
test1
plot(test1)
test3
test4 <- env[[1]]
values(test4) <- test3
values(test4[!is.na(test4)]) <- test3
values(test4[which(!is.na(test4))]) <- test3
which(!is.na(test4))
!is.na(test4)
plot(test4)
values(test4)[!is.na(values(test4))] <- test3
plot(test4)
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
x <- getValues(x)
y <- getValues(y)
resids <- lm(x ~ y)$residuals
resid.raster <- x
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
test <- raster.resid(env[[1]], env[[2]])
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
resids <- lm(x ~ y)$residuals
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
test <- raster.resid(env[[1]], env[[2]])
plot(test)
plot(env)
plot(raster.resid(env[[1, env[[4]]]]))
plot(raster.resid(env[[1]], env[[4]]))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
x <- raster.standardize(x)
y <- raster.standardize(y)
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
resids <- lm(x ~ y)$residuals
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
plot(raster.resid(env[[1]], env[[4]]))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
resids <- lm(x ~ y)$residuals
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
plot(raster.resid(env[[2]], env[[3]]))
plot(env)
test3 <- lm(test1 ~ test2)
names(test3)
help(lm)
plot(raster.resid(env[[1]], env[[2]]))
plot(raster.resid(env[[2]], env[[1]]))
plot(raster.resid(env[[1]], env[[1]]))
plot(raster.resid(env[[3]], env[[4]]))
plot(env)
help(residuals)
help(resid)
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
plot(raster.resid(env[[3]], env[[4]]))
plot(raster.resid(env[[3]], env[[2]]))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- 1
return(resid.raster)
}
plot(raster.resid(env[[3]], env[[2]]))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- seq(1:length(resids))
return(resid.raster)
}
plot(raster.resid(env[[3]], env[[2]]))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- x
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
plot(raster.resid(env[[3]], env[[4]]))
plot(raster.resid(env[[3]], env[[1]]))
plot(raster.resid(env[[3]], env[[3]]))
test1 <- raster.resid(env[[3]], env[[4]])
test1 <- raster.resid(env[[3]], env[[2]])
test2 <- raster.resid(env[[3]], env[[4]])
plot(test1 - test2)
plot(raster.resid(env[[3]], env[[1]]))
plot(raster.resid(env[[1]], env[[3]]))
plot(env[[1]])
help(lm)
test1 <- env[[1]]
test2 <- 0 - env[[1]]
plot(raster.resid(test1, test2))
write.csv(ahli, file="ahli.csv")
write.csv(allogus_east, file="allogus_east.csv")
ahli.raster <- raster("./Maxent/ahli.asc")
plot(ahli.raster)
allogus.raster <- raster("./Maxent/allogus_east.asc")
plot(allogus.raster)
plot(raster.resid(ahli.raster, allogus.raster))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- y
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(resid.raster)
}
plot(raster.resid(ahli.raster, allogus.raster))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- y
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(residuals = resid.raster, lm = this.lm)
}
test <- (raster.resid(ahli.raster, allogus.raster))
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(env[[1]], env[[2]])
#'
raster.resid <- function(x, y, method="spearman"){
resid.raster <- y
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(list(residuals = resid.raster, lm = this.lm))
}
test <- (raster.resid(ahli.raster, allogus.raster))
test$lm
summary(test$lm)
raster.cor(ahli.raster, allogus.raster)
raster.overlap(ahli.raster, allogus.raster)
save(ahli.raster)
save(ahli.raster, file="ahli.raster")
save(allogus.raster, file="allogus.raster")
library(ENMTools)
ahli.raster
rm(list=ls())
library(ENMTools)
ahli.raster
plot(ahli.raster)
ahli.raster <- raster("./ex/ahli.asc")
allogus.raster <- raster("./allogus_east.asc")
allogus.raster <- raster("./ex/allogus_east.asc")
save(ahli.raster, file="ahli.raster.rda")
save(allogus.raster, file="allogus.raster.rda")
library(ENMTools)
rm(list=ls())
library(ENMTools)
plot(ahli.raster)
plot(allogus.raster)
raster.cor(ahli.raster, allogus.raster)
raster.overlap(ahli.raster, allogus.raster)
test <- ahli.raster + 0.1 * allogus.raster
plot(raster.resid(test, ahli.raster))
plot(test)
raster.resid(test, ahli.raster)
plot(raster.resid(test, ahli.raster)$residuals)
plot(ahli.raster)
plot(test)
library(ENMTools)
install.packages(c("ade4", "boot", "curl", "deSolve", "evaluate", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "lme4", "maps", "Matrix", "mgcv", "munsell", "nlme", "NLP", "openssl", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rgbif", "rgdal", "rgeos", "rmarkdown", "scales", "shiny", "V8", "VGAM", "XML"))
install.packages(c("ade4", "boot", "curl", "deSolve", "evaluate",
)
)
install.packages(c("ade4", "boot", "curl", "deSolve", "evaluate", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "lme4", "maps", "Matrix", "mgcv", "munsell", "nlme", "NLP", "openssl", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rgbif", "rgdal", "rgeos", "rmarkdown", "scales", "shiny", "V8", "VGAM", "XML"))
install.packages(c("ade4", "boot", "curl", "deSolve", "evaluate", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "lme4", "maps", "Matrix", "mgcv", "munsell", "nlme", "NLP", "openssl", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rgbif", "rgdal", "rgeos", "rmarkdown", "scales", "shiny", "V8", "VGAM", "XML"))
install.packages(c("ade4", "boot", "curl", "deSolve", "evaluate",
install.packages(c("rgdal", "rgeos"))
library(ENMTools)
test <- "fart"
class(test)
class(ahli.raster)
#' raster.overlap, measures overlap between two ENMs
#'
#' This function measures similarity in the geographic distribution of suitability scores
#' from two ENMs.  It returns two metrics, I and D.  These metrics are described in
#' Warren et al. 2008.
#'
#' @param x A raster file
#' @param y Another raster file
#' @param verbose Controls printing of diagnostic messages
#'
#' @return results A vector containing the three metrics (I, D, and Spearman rank correlation)
#'
#' @keywords keywords
#'
#' @export raster.overlap
#'
#' @examples
#' raster.overlap(ahli.raster, allogus.raster)
raster.overlap <- function(x, y, verbose=FALSE){
proceed <- TRUE
if(proceed){  #All pre-analysis checks have been completed
if(verbose){
print(paste("Starting overlap at", Sys.time()))
}
# Test if the args are raster objects or paths to files
if(class(x) == "character"){
x <- raster(x)
}
if(class(y) == "character"){
y <- raster(y)
}
x <- raster.standardize(x)
y <- raster.standardize(y)
D <- 1 - cellStats(abs(x - y), stat=sum)/2
I <- 1 - cellStats((sqrt(x) - sqrt(y))^2, stat=sum)/2
rank.cor <- raster.cor(x, y)
results <- list(D = D, I = I, rank.cor = rank.cor)
return(results)
}
}
x1 <- ("./ex/ahli.asc")
x2 <- "./ex/allogus_east.asc"
file.exists(x1)
file.exists(x2)
raster.overlap(x1, x2)
raster.overlap(x1, "suck it")
raster.overlap(ahli.raster, allogus.raster)
}
#' raster.resid Measure correlation coefficients between two rasters
#'
#' This function measures similarity in the geographic distribution of values
#' from two rasters.  Various methods can be specified, but it defaults to
#' spearman rank correaltion
#'
#' @param x A raster file
#' @param y Another raster file
#'
#' @return results A raster of residuals from a linear regression between the two supplied rasters
#'
#' @keywords correlation, raster, residuals
#'
#' @export raster.resid
#'
#' @examples
#' raster.resid(ahli.raster, allogus.raster)
#'
raster.resid <- function(x, y, method="spearman"){
# Test if the args are raster objects or paths to files
if(class(x) == "character"){
x <- raster(x)
}
if(class(y) == "character"){
y <- raster(y)
}
resid.raster <- y
x <- getValues(x)
y <- getValues(y)
this.lm <- lm(x ~ y)
resids <- this.lm$residuals/this.lm$fitted.values
values(resid.raster)[!is.na(values(resid.raster))] <- resids
return(list(residuals = resid.raster, lm = this.lm))
}
test <- raster.resid(x1, x2)
test
plot(test)
plot(test$residuals)
ahli.raster
library(ENMTools)
ahli.raster
fix(raster.overlap)
globalenv()
View(raster.overlap)
View(raster.overlap)
rm(raster.overlap, envir=globalenv())
