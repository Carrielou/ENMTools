}
}
print.identity.test <- function(identity.test){
}
summary.identity.test <- function(identity.test){
}
plot.identity.test <- function(identity.test){
}
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 9)
id.glm
#' identity.test Measure standardized residuals from a linear regression between two rasters.
#'
#' This function builds a linear model for the relationship between two rasters, and returns the linear model
#' and a spatial raster of the residuals from that model.
#'
#' @param species.1 An emtools.species object
#' @param species.2 An enmtools.species object
#' @param env A RasterLayer or RasterStack object containing environmental data
#' @param type The type of model to construct, currently accepts "glm", "mx", "bc", or "dm"
#' @param f A function to use for model fitting.  Only required for GLM models at the moment.
#' @param nreps Number of replicates to perform
#' @param ... Additional arguments to be passed to model fitting functions.
#'
#' @return results A list containing a replicates, models for the empirical data, and summary statistics and plots.
#'
#' @keywords identity, equivalency, enmtools, hypothesis testing
#'
#' @export identity.test
#' @export identity.precheck
#' @export print.identity.test
#' @export summary.identity.test
#' @export plot.identity.test
#'
#' @examples
#' identity.test(ahli, allogus, env, type = "glm", f = layer.1 + layer.2 + layer.3, nreps = 10, ...)
#'
identity.test <- function(species.1, species.2, env, type, f = NULL, nreps = 99, ...){
identity.precheck(species.1, species.2, env, type, f, nreps)
# For starters we need to combine species background points so that each model
# is being built with the same background
species.1$background.points <- rbind(species.1$background.points, species.2$background.points)
species.2$background.points <- rbind(species.1$background.points, species.2$background.points)
combined.presence.points <- rbind(species.1$presence.points, species.2$presence.points)
#   combined.presence.points <- combined.presence.points[rep(seq_len(nrow(combined.presence.points)), nreps), ]
#   print(dim(combined.presence.points))
if(type == "glm"){
cat("\nBuilding empirical models...\n")
empirical.species.1.glm <- enmtools.glm(f, species.1, env, ...)
empirical.species.2.glm <- enmtools.glm(f, species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.glm, empirical.species.2.glm)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.glm <- enmtools.glm(f, rep.species.1, env, ...)
rep.species.2.glm <- enmtools.glm(f, rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.glm, rep.species.2.glm)))
}
}
if(type == "mx"){
cat("\nBuilding empirical models...\n")
empirical.species.1.mx <- enmtools.maxent(species.1, env, ...)
empirical.species.2.mx <- enmtools.maxent(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.mx, empirical.species.2.mx)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.mx <- enmtools.maxent(rep.species.1, env, ...)
rep.species.2.mx <- enmtools.maxent(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.mx, rep.species.2.mx)))
}
}
if(type == "bc"){
cat("\nBuilding empirical models...\n")
empirical.species.1.bc <- enmtools.bc(species.1, env, ...)
empirical.species.2.bc <- enmtools.bc(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.bc, empirical.species.2.bc)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.bc <- enmtools.bc(rep.species.1, env, ...)
rep.species.2.bc <- enmtools.bc(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.bc, rep.species.2.bc)))
}
}
if(type == "dm"){
cat("\nBuilding empirical models...\n")
empirical.species.1.dm <- enmtools.dm(species.1, env, ...)
empirical.species.2.dm <- enmtools.dm(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.dm, empirical.species.2.dm)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.dm <- enmtools.dm(rep.species.1, env, ...)
rep.species.2.dm <- enmtools.dm(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.dm, rep.species.2.dm)))
}
}
rownames(reps.overlap) <- c("empirical", paste("rep", 1:nreps))
p.values <- apply(reps.overlap, 2, function(x) 1 - mean(x > x[1]))
# mean(id.dm[,1] > id.dm[1,1])
output <- list(reps.overlap = reps.overlap,
p.values = p.values)
return(outpu)
}
identity.precheck <- function(species.1, species.2, env, type, f, nreps){
if(!"enmtools.species" %in% class(species.1)){
stop("Species.1 is not an enmtools.species object!")
}
if(!"enmtools.species" %in% class(species.2)){
stop("Species.2 is not an enmtools.species object!")
}
if(!grepl("Raster", class(env))){
stop("Environmental layers are not a RasterLayer or RasterStack object!")
}
if(type == "glm"){
if(is.null(f)){
stop("Type is set to GLM and no formula has been supplied!")
}
if(!"formula" %in% class(f)){
stop("Type is set to GLM and f is not a formula object!")
}
}
if(!type %in% c("glm", "mx", "bc", "dm")){
stop(paste("Model type", type, "not understood! Select either bc, dm, mx, or glm."))
}
check.species(species.1)
if(!any(c("data.frame") %in% class(species.1$presence.points))){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.1$background.points))){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
check.species(species.2)
if(!any(c("data.frame") %in% class(species.2$presence.points))){
stop("Species 2 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.2$background.points))){
stop("Species 2 background.points do not appear to be an object of class data.frame")
}
if(any(!colnames(species.1$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(any(!colnames(species.1$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
}
print.identity.test <- function(identity.test){
}
summary.identity.test <- function(identity.test){
}
plot.identity.test <- function(identity.test){
}
#' identity.test Measure standardized residuals from a linear regression between two rasters.
#'
#' This function builds a linear model for the relationship between two rasters, and returns the linear model
#' and a spatial raster of the residuals from that model.
#'
#' @param species.1 An emtools.species object
#' @param species.2 An enmtools.species object
#' @param env A RasterLayer or RasterStack object containing environmental data
#' @param type The type of model to construct, currently accepts "glm", "mx", "bc", or "dm"
#' @param f A function to use for model fitting.  Only required for GLM models at the moment.
#' @param nreps Number of replicates to perform
#' @param ... Additional arguments to be passed to model fitting functions.
#'
#' @return results A list containing a replicates, models for the empirical data, and summary statistics and plots.
#'
#' @keywords identity, equivalency, enmtools, hypothesis testing
#'
#' @export identity.test
#' @export identity.precheck
#' @export print.identity.test
#' @export summary.identity.test
#' @export plot.identity.test
#'
#' @examples
#' identity.test(ahli, allogus, env, type = "glm", f = layer.1 + layer.2 + layer.3, nreps = 10, ...)
#'
identity.test <- function(species.1, species.2, env, type, f = NULL, nreps = 99, ...){
identity.precheck(species.1, species.2, env, type, f, nreps)
# For starters we need to combine species background points so that each model
# is being built with the same background
species.1$background.points <- rbind(species.1$background.points, species.2$background.points)
species.2$background.points <- rbind(species.1$background.points, species.2$background.points)
combined.presence.points <- rbind(species.1$presence.points, species.2$presence.points)
#   combined.presence.points <- combined.presence.points[rep(seq_len(nrow(combined.presence.points)), nreps), ]
#   print(dim(combined.presence.points))
if(type == "glm"){
cat("\nBuilding empirical models...\n")
empirical.species.1.glm <- enmtools.glm(f, species.1, env, ...)
empirical.species.2.glm <- enmtools.glm(f, species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.glm, empirical.species.2.glm)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.glm <- enmtools.glm(f, rep.species.1, env, ...)
rep.species.2.glm <- enmtools.glm(f, rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.glm, rep.species.2.glm)))
}
}
if(type == "mx"){
cat("\nBuilding empirical models...\n")
empirical.species.1.mx <- enmtools.maxent(species.1, env, ...)
empirical.species.2.mx <- enmtools.maxent(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.mx, empirical.species.2.mx)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.mx <- enmtools.maxent(rep.species.1, env, ...)
rep.species.2.mx <- enmtools.maxent(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.mx, rep.species.2.mx)))
}
}
if(type == "bc"){
cat("\nBuilding empirical models...\n")
empirical.species.1.bc <- enmtools.bc(species.1, env, ...)
empirical.species.2.bc <- enmtools.bc(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.bc, empirical.species.2.bc)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.bc <- enmtools.bc(rep.species.1, env, ...)
rep.species.2.bc <- enmtools.bc(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.bc, rep.species.2.bc)))
}
}
if(type == "dm"){
cat("\nBuilding empirical models...\n")
empirical.species.1.dm <- enmtools.dm(species.1, env, ...)
empirical.species.2.dm <- enmtools.dm(species.2, env, ...)
empirical.overlap <- raster.overlap(empirical.species.1.dm, empirical.species.2.dm)
reps.overlap <- unlist(empirical.overlap)
cat("\nBuilding replicate models...\n")
for(i in 1:nreps){
cat(paste("\nReplicate", i, "...\n"))
combined.presence.points <- combined.presence.points[sample(nrow(combined.presence.points)),]
rep.species.1 <- species.1
rep.species.2 <- species.2
rep.species.1$presence.points <- combined.presence.points[1:nrow(species.1$presence.points),]
rep.species.2$presence.points <- combined.presence.points[(nrow(species.1$presence.points) + 1):nrow(combined.presence.points),]
rep.species.1.dm <- enmtools.dm(rep.species.1, env, ...)
rep.species.2.dm <- enmtools.dm(rep.species.2, env, ...)
reps.overlap <- rbind(reps.overlap, unlist(raster.overlap(rep.species.1.dm, rep.species.2.dm)))
}
}
rownames(reps.overlap) <- c("empirical", paste("rep", 1:nreps))
p.values <- apply(reps.overlap, 2, function(x) 1 - mean(x > x[1]))
# mean(id.dm[,1] > id.dm[1,1])
output <- list(reps.overlap = reps.overlap,
p.values = p.values)
return(output)
}
identity.precheck <- function(species.1, species.2, env, type, f, nreps){
if(!"enmtools.species" %in% class(species.1)){
stop("Species.1 is not an enmtools.species object!")
}
if(!"enmtools.species" %in% class(species.2)){
stop("Species.2 is not an enmtools.species object!")
}
if(!grepl("Raster", class(env))){
stop("Environmental layers are not a RasterLayer or RasterStack object!")
}
if(type == "glm"){
if(is.null(f)){
stop("Type is set to GLM and no formula has been supplied!")
}
if(!"formula" %in% class(f)){
stop("Type is set to GLM and f is not a formula object!")
}
}
if(!type %in% c("glm", "mx", "bc", "dm")){
stop(paste("Model type", type, "not understood! Select either bc, dm, mx, or glm."))
}
check.species(species.1)
if(!any(c("data.frame") %in% class(species.1$presence.points))){
stop("Species 1 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.1$background.points))){
stop("Species 1 background.points do not appear to be an object of class data.frame")
}
check.species(species.2)
if(!any(c("data.frame") %in% class(species.2$presence.points))){
stop("Species 2 presence.points do not appear to be an object of class data.frame")
}
if(!any(c("data.frame") %in% class(species.2$background.points))){
stop("Species 2 background.points do not appear to be an object of class data.frame")
}
if(any(!colnames(species.1$background.points) %in% colnames(species.2$background.points))){
stop("Column names for species background points do not match!")
}
if(any(!colnames(species.1$presence.points) %in% colnames(species.2$presence.points))){
stop("Column names for species presence points do not match!")
}
}
print.identity.test <- function(identity.test){
}
summary.identity.test <- function(identity.test){
}
plot.identity.test <- function(identity.test){
}
id.glm <- identity.test(species.1 = ahli, species.2 = allogus, env = env, type = "glm", f = presence ~ layer.1 + layer.2 + layer.3 + layer.4, nreps = 9)
setwd("~/Dropbox/Ongoing Projects/Fish OPT")
library(ape)
library(ggplot2)
library(knitr)
library(plyr)
library(geiger)
library(nlme)
library(AICcmodavg)
install.packages("geiger")
library(geiger)
library(nlme)
library(AICcmodavg)
fish.table <- read.csv(file = "Segmentation_Stats.csv", header = TRUE)
fish.tree <- read.tree(file = "All_Taxatree_July14")
fish.table <- fish.table[complete.cases(fish.table),]
# Fish in data table that are missing from tree:
print(fish.table$Species[!fish.table$Species %in% fish.tree$tip.label])
fish.tree <- drop.tip(fish.tree, fish.tree$tip.label[!fish.tree$tip.label %in% fish.table$Species])
plot(fish.tree, use.edge.length = FALSE)
analysis.cols <- c("Species", "TeO.Brain", "OPT1", "OPT2", "OPT3", "activity")
analysis.table <- fish.table[,analysis.cols]
analysis.table <- ddply(fish.table, "Species", summarize,
teo.brain = mean(TeO.Brain),
OPT1 = mean(OPT1),
OPT2 = mean(OPT2),
OPT3 = mean(OPT3),
activity = unique(activity))
row.names(analysis.table) <- analysis.table$Species
analysis.table <- analysis.table[,-1]
analysis.table <- analysis.table[fish.tree$tip.label,]
pairs(analysis.table)
# Quick look at un-phylo-corrected correlations
qplot(OPT1, teo.brain, data = analysis.table, color = activity)
qplot(OPT2, teo.brain, data = analysis.table, color = activity)
qplot(OPT3, teo.brain, data = analysis.table, color = activity)
this.alpha = .1
# NOTE THIS IS JUST A STARTING VALUE, GO BACK AND OPTIMIZE LATER
bm<-corBrownian(phy=fish.tree)
ou<-corMartins(this.alpha, phy=fish.tree)
bm.int <- gls(teo.brain ~ 1, correlation = bm, data = analysis.table, method = "ML")
summary(bm.int)
ou.int <- gls(teo.brain ~ 1, correlation = ou, data = analysis.table, method = "ML")
summary(ou.int)
bm.opt1 <- gls(teo.brain ~ OPT1 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt1)
ou.opt1 <- gls(teo.brain ~ OPT1 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt1)
bm.opt2 <- gls(teo.brain ~ OPT2 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt2)
ou.opt2 <- gls(teo.brain ~ OPT2 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt2)
bm.opt3 <- gls(teo.brain ~ OPT3 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt3)
ou.opt3 <- gls(teo.brain ~ OPT3 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt3)
bm.noc <- gls(teo.brain ~ activity ,correlation=bm,data=analysis.table, method="ML")
summary(bm.noc)
ou.noc <- gls(teo.brain ~ activity ,correlation=ou,data=analysis.table, method="ML")
summary(ou.noc)
bm.all <- gls(teo.brain ~ OPT1 + OPT2 + OPT3 + activity, correlation = bm, data = analysis.table, method = "ML")
summary(bm.all)
ou.all <- gls(teo.brain ~ OPT1 + OPT2 + OPT3 + activity, correlation = ou, data = analysis.table, method = "ML")
summary(ou.all)
models <- list(bm.int = bm.int,
ou.int = ou.int,
bm.opt1 = bm.opt1,
ou.opt1 = ou.opt1,
bm.opt2 = bm.opt2,
ou.opt2 = ou.opt2,
bm.opt3 = bm.opt3,
ou.opt3 = ou.opt3,
bm.noc = bm.noc,
ou.noc = ou.noc,
bm.all = bm.all,
ou.all = ou.all)
models <- list(bm.int = bm.int,
bm.opt1 = bm.opt1,
bm.opt2 = bm.opt2,
bm.opt3 = bm.opt3,
bm.noc = bm.noc,
bm.all = bm.all)
kable(aictab(models, modnames = names(models)))
modavg(models, modnames = names(models), parm="OPT3")
modavg(models, modnames = names(models), parm="activitynocturnal")
rownames(analysis.table)
fit.ou <- fitContinuous(fish.tree, data.frame(analysis.table$teo.brain, row.names=rownames(analysis.table)), model="OU")
this.alpha = fit.ou$opt$alpha
bm<-corBrownian(phy=fish.tree)
ou<-corMartins(this.alpha, phy=fish.tree)
bm.int <- gls(teo.brain ~ 1, correlation = bm, data = analysis.table, method = "ML")
summary(bm.int)
ou.int <- gls(teo.brain ~ 1, correlation = ou, data = analysis.table, method = "ML")
summary(ou.int)
bm.opt1 <- gls(teo.brain ~ OPT1 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt1)
ou.opt1 <- gls(teo.brain ~ OPT1 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt1)
bm.opt2 <- gls(teo.brain ~ OPT2 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt2)
ou.opt2 <- gls(teo.brain ~ OPT2 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt2)
bm.opt3 <- gls(teo.brain ~ OPT3 ,correlation=bm,data=analysis.table, method="ML")
summary(bm.opt3)
ou.opt3 <- gls(teo.brain ~ OPT3 ,correlation=ou,data=analysis.table, method="ML")
summary(ou.opt3)
bm.noc <- gls(teo.brain ~ activity ,correlation=bm,data=analysis.table, method="ML")
summary(bm.noc)
ou.noc <- gls(teo.brain ~ activity ,correlation=ou,data=analysis.table, method="ML")
summary(ou.noc)
bm.all <- gls(teo.brain ~ OPT1 + OPT2 + OPT3 + activity, correlation = bm, data = analysis.table, method = "ML")
summary(bm.all)
ou.all <- gls(teo.brain ~ OPT1 + OPT2 + OPT3 + activity, correlation = ou, data = analysis.table, method = "ML")
summary(ou.all)
models <- list(bm.int = bm.int,
ou.int = ou.int,
bm.opt1 = bm.opt1,
ou.opt1 = ou.opt1,
bm.opt2 = bm.opt2,
ou.opt2 = ou.opt2,
bm.opt3 = bm.opt3,
ou.opt3 = ou.opt3,
bm.noc = bm.noc,
ou.noc = ou.noc,
bm.all = bm.all,
ou.all = ou.all)
kable(aictab(models, modnames = names(models)))
modavg(models, modnames = names(models), parm="OPT3")
modavg(models, modnames = names(models), parm="activitynocturnal")
models <- list(bm.int = bm.int,
ou.int = ou.int,
bm.opt1 = bm.opt1,
ou.opt1 = ou.opt1,
bm.opt2 = bm.opt2,
ou.opt2 = ou.opt2,
bm.opt3 = bm.opt3,
ou.opt3 = ou.opt3,
bm.noc = bm.noc,
ou.noc = ou.noc,
bm.all = bm.all,
ou.all = ou.all)
kable(aictab(models, modnames = names(models)))
models <- list(bm.int = bm.int,
bm.opt1 = bm.opt1,
bm.opt2 = bm.opt2,
bm.opt3 = bm.opt3,
bm.noc = bm.noc,
bm.all = bm.all)
kable(aictab(models, modnames = names(models)))
modavg(models, modnames = names(models), parm="OPT3")
modavg(models, modnames = names(models), parm="activitynocturnal")
summary(bm.int)
summary(bm.opt3)
summary(bm.noc)
models <- list(bm.int = bm.int,
bm.opt1 = bm.opt1,
bm.opt2 = bm.opt2,
bm.opt3 = bm.opt3,
bm.all = bm.all)
kable(aictab(models, modnames = names(models)))
modavg(models, modnames = names(models), parm="OPT3")
models <- list(bm.int = bm.int,
bm.opt1 = bm.opt1,
bm.opt2 = bm.opt2,
bm.opt3 = bm.opt3,
bm.noc = bm.noc,
bm.all = bm.all)
kable(aictab(models, modnames = names(models)))
modavg(models, modnames = names(models), parm="OPT3")
modavg(models, modnames = names(models), parm="activitynocturnal")
