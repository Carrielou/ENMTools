env2 <- env[[2]]
add.test <- function(species, max){
extract(env2, species$background.points[1:max,])
}
nums <- c(250, 256)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(add.test(allogus, time.df[i,1]))["elapsed"]
}
qplot(nums, time, data = time.df)
env2 <- env[[3]]
add.test <- function(species, max){
extract(env2, species$background.points[1:max,])
}
nums <- c(250, 256)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(add.test(allogus, time.df[i,1]))["elapsed"]
}
qplot(nums, time, data = time.df)
env2 <- env[[4]]
add.test <- function(species, max){
extract(env2, species$background.points[1:max,])
}
nums <- c(250, 256)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(add.test(allogus, time.df[i,1]))["elapsed"]
}
qplot(nums, time, data = time.df)
randomPoints(env, 100)
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
extract.test(env, 5)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(env, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
warnings()
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(test.stack, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
test.stack
env
help(raster)
projection(env) <- projection(test.stack)
env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(env, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
test.stack <- stack(test.stack, test.stack/2)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(test.stack, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
compareRaster(env, test.stack)
dim(env)
dim(test.stack)
r <- raster(ncol=1000, nrow=1000)
r[] <- runif(ncell(r))
s <- r **2
t <- s *runif(n = ncell(r))
test.stack <- stack(r,s,t)
xy <- data.frame(cbind(-50, seq(-80, 80, by=.1)))
extract(test.stack, xy)
env
r <- raster(ncol=418, nrow=1535)
r[] <- runif(ncell(r))
s <- r **2
t <- s *runif(n = ncell(r))
test.stack <- stack(r,s,t)
count(!is.na(env))
sum(!is.na(env))
sum(!is.na(getValues(env)))
r <- env
r[!is.na(r)] <- runif(sum(!is.na(getValues(env))))
s <- r **2
t <- s *runif(n = ncell(r))
r <- env
r[!is.na(r)] <- runif(sum(!is.na(getValues(env))))
s <- r **2
t <- s *runif(sum(!is.na(getValues(env))))
test.stack <- stack(r,s,t)
plot(s)
r <- env
r[!is.na(r)] <- runif(sum(!is.na(getValues(env))))
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(test.stack, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
test.stack
r <- env
r[!is.na(r)] <- runif(sum(!is.na(getValues(env))))
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(test.stack, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
plot(test.stack)
plot(env)
r <- env
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
help(pca)
help(pc)
help(princomp)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
test.stack
test.stack[[1]][1:300000] <- NA
test.stack[[2]][1:300000] <- NA
plot(test.stack)
r
r2 <- 4
r2 <- r
r
plot(r)
r2 <- raster(nrows = 418, ncols = 1535)
r2[] <- 1:ncell(r2)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r2, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
r3 <- r2
r3[which(is.na(r[[1]]))] <- NA
r3 <- r2
r3[is.na(r[[1]])] <- NA
plot(r3)
is.na(r[[1]])
is.na(getValues(r[[1]]))
r3 <- r2
r3[is.na(getValues(r[[1]]))] <- NA
plot(r3)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r3, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
r3 <- r2/1000
r3[is.na(getValues(r[[1]]))] <- NA
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r3, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
plot(r3)
r3
env[[1]]
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(env[[1]], time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
plot(r3)
plot(env[[1]])
r4 <- env[[1]]
r4[] <- 1:length(r4)
plot(r4)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r4, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
r5 <- env[[1]]
plot(r3)
r5[!is.na(getValues(r5))] <- 1:length(getValues(r5))
r5[!is.na(getValues(r5))] <- 1:length(!is.na(getValues(r5)))
length(!is.na(getValues(r5)))
r5[!is.na(getValues(r5))] <- 1
plot(r5)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r5, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
r5 <- env
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r5, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
plot(r5)
r5[[1]][!is.na(r5[[1]])] <- 1
plot(r5)
r5[[2]][!is.na(r5[[2]])] <- 2
r5[[3]][!is.na(r5[[3]])] <- 3
r5[[4]][!is.na(r5[[4]])] <- 4
plot(r5)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r5, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(env, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
extract.test(env, 251)
extract.test(env, 250)
r5 <- env
r5[[4]][!is.na(r5[[4]])] <- 4 * r5[[4]]
system.time(extract.test(env, 250))["elapsed"]
system.time(extract.test(env, 251))["elapsed"]
system.time(extract.test(env, 251))
system.time(extract.test(env, 250))
plot(r4)
plot(r3)
plot(r2)
plot(r)
r <- env
r[!is.na(r)] <- runif(sum(!is.na(getValues(env))))
plot(r)
# Testing add.env
extract.test <- function(env, N){
extract(env, randomPoints(env, N))
}
nums <- c(1, 5, 10, 50, 100, 150, 200, 250, 251, 252, 254, 256, 500, 1000)
time.df <- data.frame(nums = nums, time = rep(NA, length(nums)))
for(i in 1:nrow(time.df)){
time.df[i,2] <- system.time(extract.test(r, time.df[i,1]))["elapsed"]
print(time.df[i,])
}
qplot(nums, time, data = time.df)
r
env
minValue(env[[1]])
help(setMinMax)
help(cor)
library(ENMTools)
setwd("~/GitHub/ENMTools/test")
library(ENMTools)
# This code builds the readme.rmd file into a regular md file, which GitHub understands better
knit(input="Readme.Rmd", output = "readme.md")
env.files <- list.files(path = "testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)
ahli <- enmtools.species()
check.species(ahli)
allogus <- enmtools.species(species.name = "allogus", presence.points = read.csv("testdata/allogus.csv")[,3:4])
check.species(allogus)
ahli <- enmtools.species(species.name = "ahli", presence.points = read.csv("testdata/ahli.csv")[,3:4])
check.species(ahli)
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,radius = 20000, n = 1000, mask = env[[1]])
allogus$background.points <- background.points.buffer(points = allogus$presence.points,radius = 20000, n = 1000, mask = env[[1]])
# Should fail because presence and background have different col names
check.species(ahli)
colnames(ahli$background.points) <- colnames(ahli$presence.points)
colnames(allogus$background.points) <- colnames(allogus$presence.points)
two.anoles <- enmtools.clade(list(ahli, allogus))
two.anoles
check.clade(two.anoles)
summary(ahli)
print(ahli)
plot(ahli)
summary(two.anoles)
plot(two.anoles)
ahli.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, ahli, env, test.prop = 0.2)
ahli.glm
allogus.glm <- enmtools.glm(pres ~ layer.1 + layer.2 + layer.3 + layer.4, allogus, env)
allogus.glm
ahli.twovar.glm <- enmtools.glm(pres ~ layer.1 + layer.4, ahli, env)
ahli.twovar.glm
# Presently leaving out GAM, as it is hard to see how I'm going to be able to
# use it in the same way as the other methods.
# ahli.gam <- enmtools.gam(presence ~, ahli, env)
ahli.bc <- enmtools.bc(ahli, env, test.prop = 0.2)
ahli.bc
ahli.bc2 <- enmtools.bc(ahli, env[[c("layer.1", "layer.4")]])
ahli.mx <- enmtools.maxent(ahli, env, test.prop = 0.2)
ahli.mx
ahli.dm <- enmtools.dm(ahli, env, test.prop = 0.2)
ahli.dm
allogus.dm <- enmtools.dm(allogus, env)
allogus.dm
raster.cor(allogus.dm, ahli.dm)
raster.cor(ahli.mx, ahli.dm)
plot(raster.standardize(ahli.dm))
raster.breadth(allogus.dm)
raster.overlap(allogus.dm, allogus.dm$suitability)
raster.overlap(ahli.dm, allogus.dm)
raster.resid(ahli.dm, ahli.glm)
plot(raster.resid(ahli.glm, ahli.dm)$residuals)
env
ahli.dm <- enmtools.dm(ahli, env, test.prop = 0.2)
#' Takes an emtools.species object with presence and background points, and builds a Domain model
#'
#' @param species An enmtools.species object
#' @param env A raster or raster stack of environmental data.
#' @param test.prop Proportion of data to withhold for model evaluation
#' @param ... Arguments to be passed to bioclim()
#'
#' @export enmtools.dm
#' @export print.enmtools.dm
#' @export summary.enmtools.dm
#' @export plot.enmtools.dm
enmtools.dm <- function(species, env = NA, test.prop = 0, ...){
species <- check.bg(species, env, ...)
dm.precheck(species, env)
test.data <- NA
test.evaluation <- NA
if(test.prop > 0 & test.prop < 1){
test.inds <- sample(1:nrow(species$presence.points), ceiling(nrow(species$presence.points) * test.prop))
test.data <- species$presence.points[test.inds,]
species$presence.points <- species$presence.points[-test.inds,]
}
print(species$presence.points)
this.dm <- domain(env, species$presence.points[,1:2])
model.evaluation <- evaluate(species$presence.points[,1:2], species$background.points[,1:2],
this.dm, env)
if(test.prop > 0 & test.prop < 1){
test.evaluation <- evaluate(test.data, species$background.points[,1:2],
this.dm, env)
}
suitability <- suitability <- predict(env, this.dm, type = "response")
output <- list(analysis.df = species$presence.points[,1:2],
test.data = test.data,
test.prop = test.prop,
model = this.dm,
training.evaluation = model.evaluation,
test.evaluation = test.evaluation,
suitability = suitability)
class(output) <- c("enmtools.dm", "enmtools.model")
return(output)
}
# Summary for objects of class enmtools.dm
summary.enmtools.dm <- function(this.dm){
cat("\n\nData table (top ten lines): ")
print(kable(head(this.dm$analysis.df, 10)))
cat("\n\nModel:  ")
print(this.dm$model)
cat("\n\nModel fit (training data):  ")
print(this.dm$training.evaluation)
cat("\n\nProportion of data wittheld for model fitting:  ")
cat(this.dm$test.prop)
cat("\n\nModel fit (test data):  ")
print(this.dm$test.evaluation)
cat("\n\nSuitability:  \n")
print(this.dm$suitability)
plot(this.dm)
}
#Print method for objects of class enmtools.dm
print.enmtools.dm <- function(this.dm){
summary(this.dm)
}
# Plot method for objects of class enmtools.dm
plot.enmtools.dm <- function(this.dm){
plot(this.dm$suitability, col = plasma(64))
points(this.dm$analysis.df, pch = 21, bg = "white")
if(!is.na(this.dm$test.prop)){
points(this.dm$test.data, pch = 21, bg = "green")
}
}
# Checking data for analysis using enmtools.dm
dm.precheck <- function(species, env, f){
### Check to make sure the data we need is there
if(!inherits(species, "enmtools.species")){
stop("Argument \'species\' must contain an enmtools.species object!")
}
check.species(species)
if(!inherits(species$presence.points, "data.frame")){
stop("Species presence.points do not appear to be an object of class data.frame")
}
if(!inherits(env, c("raster", "RasterLayer", "RasterStack"))){
stop("No environmental rasters were supplied!")
}
if(ncol(species$presence.points) != 2){
stop("Species presence points do not contain longitude and latitude data!")
}
}
ahli.dm <- enmtools.dm(ahli, env, test.prop = 0.2)
domain(env, ahli$presence.points)
help(domain)
library(dismo)
domain(env, ahli$presence.points)
logo <- stack(system.file("external/rlogo.grd", package="raster"))
#presence data
pts <- matrix(c(48.243420, 48.243420, 47.985820, 52.880230, 49.531423, 46.182616, 54.168232,
69.624263, 83.792291, 85.337894, 74.261072, 83.792291, 95.126713, 84.565092, 66.275456,
41.803408, 25.832176, 3.936132, 18.876962, 17.331359,7.048974, 13.648543, 26.093446,
28.544714, 39.104026, 44.572240, 51.171810, 56.262906, 46.269272, 38.161230, 30.618865,
21.945145, 34.390047, 59.656971, 69.839163, 73.233228, 63.239594, 45.892154, 43.252326,
28.356155), ncol=2)
d <- domain(logo, pts)
p <- predict(d, logo)
