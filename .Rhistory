#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the background test.
#'
#' @keywords keywords
#'
#' @export reps.background.raster
#'
#' @examples
#' reps.background.raster(env, outfile = "~/myreps.csv", npoints = 20, reps=100)
reps.background <- function(x, outfile = FALSE, npoints, reps = 10, species= "species", verbose=FALSE, ...){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
if(verbose){print(paste("Starting background reps at", Sys.time()))}
if(verbose){print(paste("Generating a total of", reps*npoints, "points in", reps, "replicates"))}  #Prints number of points per species
# Background points from raster layer
if(class(x) == "RasterLayer"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
randomPoints(x, npoints*reps, ...)))
}
# Background points from data frame
if(class(x) == "data.frame"){
if(npoints > length(x[,1])){
stop(paste("Number of points per rep (", npoints ,") exceeds number of points provided (", length(x[,1]) ,")!"), sep = "")
}
if(verbose){
print(paste("Starting background reps at", Sys.time()))
}
inds <- c()
for(i in 1:reps){
inds <- c(inds, sample(1:length(x[,1]), npoints))
}
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"), x[inds,]))
}
if(class(x) == "SpatialPolygons"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
as.data.frame(spsample(x, npoints*reps, type = "random", ...))))
row.names(output) <- NULL
}
colnames(output) <- c("species", "lon", "lat")
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
test <- reps.background(ahli[,2:3], outfile = "poly.csv", reps = 3, npoints = 10, verbose = TRUE)
test
#' reps.background, creates Monte Carlo replicates for ENM background test
#'
#' This function generates replicates for the background test, as described in
#' Warren et al. 2008
#'
#'
#' @param x A raster file, shape file, or data frame to use as a mask for drawing points
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param npoints The number of points in each replicate
#' @param verbose Controls printing of diagnostic messages
#' @param ... arguments to be passed to the randomPoints function of dismo
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the background test.
#'
#' @keywords keywords
#'
#' @export reps.background.raster
#'
#' @examples
#' reps.background.raster(env, outfile = "~/myreps.csv", npoints = 20, reps=100)
reps.background <- function(x, outfile = FALSE, npoints, reps = 10, species= "species", verbose=FALSE, ...){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
if(verbose){print(paste("Starting background reps at", Sys.time()))}
if(verbose){print(paste("Generating a total of", reps*npoints, "points in", reps, "replicates"))}  #Prints number of points per species
# Background points from raster layer
if(class(x) == "RasterLayer"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
randomPoints(x, npoints*reps, ...)))
}
# Background points from data frame
if(class(x) == "data.frame"){
if(npoints > length(x[,1])){
stop(paste("Number of points per rep (", npoints ,") exceeds number of points provided (", length(x[,1]) ,")!"), sep = "")
}
if(verbose){
print(paste("Starting background reps at", Sys.time()))
}
inds <- c()
for(i in 1:reps){
inds <- c(inds, sample(1:length(x[,1]), npoints))
}
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"), x[inds,]))
}
if(class(x) == "SpatialPolygons"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
as.data.frame(spsample(x, npoints*reps, type = "random", ...))))
row.names(output) <- seq(1:nrow(output))
}
colnames(output) <- c("species", "lon", "lat")
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
test <- reps.background(ahli[,2:3], outfile = "poly.csv", reps = 3, npoints = 10, verbose = TRUE)
test
row.names(test) <- seq(1:nrow(test))
test
#' reps.background, creates Monte Carlo replicates for ENM background test
#'
#' This function generates replicates for the background test, as described in
#' Warren et al. 2008
#'
#'
#' @param x A raster file, shape file, or data frame to use as a mask for drawing points
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param npoints The number of points in each replicate
#' @param verbose Controls printing of diagnostic messages
#' @param ... arguments to be passed to the randomPoints function of dismo
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the background test.
#'
#' @keywords keywords
#'
#' @export reps.background.raster
#'
#' @examples
#' reps.background.raster(env, outfile = "~/myreps.csv", npoints = 20, reps=100)
reps.background <- function(x, outfile = FALSE, npoints, reps = 10, species= "species", verbose=FALSE, ...){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
if(verbose){print(paste("Starting background reps at", Sys.time()))}
if(verbose){print(paste("Generating a total of", reps*npoints, "points in", reps, "replicates"))}  #Prints number of points per species
# Background points from raster layer
if(class(x) == "RasterLayer"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
randomPoints(x, npoints*reps, ...)))
}
# Background points from data frame
if(class(x) == "data.frame"){
if(npoints > length(x[,1])){
stop(paste("Number of points per rep (", npoints ,") exceeds number of points provided (", length(x[,1]) ,")!"), sep = "")
}
if(verbose){
print(paste("Starting background reps at", Sys.time()))
}
inds <- c()
for(i in 1:reps){
inds <- c(inds, sample(1:length(x[,1]), npoints))
}
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"), x[inds,]))
}
if(class(x) == "SpatialPolygons"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
as.data.frame(spsample(x, npoints*reps, type = "random", ...))))
row.names(output) <- seq(1:nrow(output))
}
colnames(output) <- c("species", "lon", "lat")
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
test <- reps.background(ahli[,2:3], outfile = "poly.csv", reps = 3, npoints = 10, verbose = TRUE)
test
#' reps.background, creates Monte Carlo replicates for ENM background test
#'
#' This function generates replicates for the background test, as described in
#' Warren et al. 2008
#'
#'
#' @param x A raster file, shape file, or data frame to use as a mask for drawing points
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param npoints The number of points in each replicate
#' @param verbose Controls printing of diagnostic messages
#' @param ... arguments to be passed to the randomPoints function of dismo
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the background test.
#'
#' @keywords keywords
#'
#' @export reps.background.raster
#'
#' @examples
#' reps.background.raster(env, outfile = "~/myreps.csv", npoints = 20, reps=100)
reps.background <- function(x, outfile = FALSE, npoints, reps = 10, species= "species", verbose=FALSE, ...){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
if(verbose){print(paste("Starting background reps at", Sys.time()))}
if(verbose){print(paste("Generating a total of", reps*npoints, "points in", reps, "replicates"))}  #Prints number of points per species
# Background points from raster layer
if(class(x) == "RasterLayer"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
randomPoints(x, npoints*reps, ...)))
}
# Background points from data frame
if(class(x) == "data.frame"){
if(npoints > length(x[,1])){
stop(paste("Number of points per rep (", npoints ,") exceeds number of points provided (", length(x[,1]) ,")!"), sep = "")
}
if(verbose){
print(paste("Starting background reps at", Sys.time()))
}
inds <- c()
for(i in 1:reps){
inds <- c(inds, sample(1:length(x[,1]), npoints))
}
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"), x[inds,]))
}
if(class(x) == "SpatialPolygons"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
as.data.frame(spsample(x, npoints*reps, type = "random", ...))))
rownames(output) <- seq(1:nrow(output))
}
colnames(output) <- c("species", "lon", "lat")
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
test <- reps.background(ahli[,2:3], outfile = "poly.csv", reps = 3, npoints = 10, verbose = TRUE)
test
View(test)
View(test)
View(test)
library(ENMTools)
library(ENMTools)
#' reps.background, creates Monte Carlo replicates for ENM background test
#'
#' This function generates replicates for the background test, as described in
#' Warren et al. 2008
#'
#'
#' @param x A raster file, shape file, or data frame to use as a mask for drawing points
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param npoints The number of points in each replicate
#' @param verbose Controls printing of diagnostic messages
#' @param ... arguments to be passed to the randomPoints function of dismo
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the background test.
#'
#' @keywords keywords
#'
#' @export reps.background
#'
#' @examples
#' # Points from a data frame
#' reps.background(ahli, outfile = "myreps.csv", npoints = 10, reps=100)
#'
#' # Points from a raster
#' reps.background(ahli.raster, outfile = "myreps.csv", npoints = 10, reps=100)
#'
#' #Points from a polygon
#' ahli.shape <- circles(ahli[,2:3], d = 5000, lonlat=TRUE)
#' reps.background(ahli.shape, outfile = "myreps.csv", npoints = 10, reps=100)
reps.background <- function(x, outfile = FALSE, npoints, reps = 10, species= "species", verbose=FALSE, ...){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
if(verbose){print(paste("Starting background reps at", Sys.time()))}
if(verbose){print(paste("Generating a total of", reps*npoints, "points in", reps, "replicates"))}  #Prints number of points per species
# Background points from raster layer
if(class(x) == "RasterLayer"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
randomPoints(x, npoints*reps, ...)))
colnames(output) <- c("species", "lon", "lat")
}
# Background points from data frame
if(class(x) == "data.frame"){
if(npoints > length(x[,1])){
stop(paste("Number of points per rep (", npoints ,") exceeds number of points provided (", length(x[,1]) ,")!"), sep = "")
}
if(verbose){
print(paste("Starting background reps at", Sys.time()))
}
inds <- c()
for(i in 1:reps){
inds <- c(inds, sample(1:length(x[,1]), npoints))
}
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"), x[inds,]))
colnames(output) <- c("species", colnames(x))
}
if(class(x) == "SpatialPolygons"){
output <- as.data.frame(cbind(paste(species, "rep", rep(seq(1, reps), each=npoints), sep="_"),
as.data.frame(spsample(x, npoints*reps, type = "random", ...))))
rownames(output) <- seq(1:nrow(output))
colnames(output) <- c("species", "lon", "lat")
}
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
reps.background(ahli)
test <- reps.background(ahli, outfile = "poly.csv", reps = 3, npoints = 10, verbose = TRUE)
test
sample(30, 3)
sample(30, 3 * 5)
paste("rep", seq(1,3,each = 5))
paste("rep", seq(1,3), each = 5)
help(seq)
paste("rep", rep(seq(1,3), each = 5))
paste0("rep_", rep(seq(1,3), each = 5))
test <- paste0("rep_", rep(seq(1,3), each = 5))
test2 <- paste0("rep_", rep(seq(1,3), each = 5))
paste(test1, test2)
paste(test, test2)
comb <- cbind(ahli, allogus)
comb <- cbind(ahli, allogus_east)
comb <- rbind(ahli, allogus_east)
comb
#' reps.identity, creates Monte Carlo replicates for ENM identity test
#'
#' This function generates replicates for the identity test, as described in
#' Warren et al. 2008
#'
#'
#' @param x One or more .csv files containing species occurrence data
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param verbose Controls printing of diagnostic messages
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the identity test.
#'
#' @keywords keywords
#'
#' @export reps.identity
#'
#' @examples
#' reps.identity(infiles = "~/myfile.csv", outfile = "~/myreps.csv", reps=100)
reps.identity <- function(x, outfile = FALSE, reps = 10, verbose=FALSE, name.column = 1){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
# Test if the arg is a csv or a path to a file
if(class(x) == "character"){
if(!file.exists(x)){
stop(paste(x, "not found!"))
}
# File exists, read it in
x <- read.csv(x)
}
if(verbose){print(paste("Starting identity reps on", paste(infiles, collapse = " and "), "at", Sys.time()))}
if(verbose){print(table(x[,1]))}  #Prints number of points per species
sample.vector <- c()
for(i in 1:reps){
sample.vector <- c(sample.vector, sample(nrow(x), nrow(x), replace=FALSE))
}
output <- cbind(rep(x[,name.column], reps), x[sample.vector,-name.column])
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
reps.identity(comb, reps = 5)
#' reps.identity, creates Monte Carlo replicates for ENM identity test
#'
#' This function generates replicates for the identity test, as described in
#' Warren et al. 2008
#'
#'
#' @param x One or more .csv files containing species occurrence data
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param verbose Controls printing of diagnostic messages
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the identity test.
#'
#' @keywords keywords
#'
#' @export reps.identity
#'
#' @examples
#' reps.identity(infiles = "~/myfile.csv", outfile = "~/myreps.csv", reps=100)
reps.identity <- function(x, outfile = FALSE, reps = 10, verbose=FALSE, name.column = 1){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
# Test if the arg is a csv or a path to a file
if(class(x) == "character"){
if(!file.exists(x)){
stop(paste(x, "not found!"))
}
# File exists, read it in
x <- read.csv(x)
}
if(verbose){print(paste("Starting identity reps on", paste(infiles, collapse = " and "), "at", Sys.time()))}
if(verbose){print(table(x[,1]))}  #Prints number of points per species
sample.vector <- c()
for(i in 1:reps){
sample.vector <- c(sample.vector, sample(nrow(x), nrow(x), replace=FALSE))
}
output <- cbind(paste(rep(x[,name.column], reps), paste("rep", rep(seq(1:reps), each = nrow(x)), sep = "_"),sep = "_"),
x[sample.vector,-name.column])
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
reps.identity(comb, reps = 5)
#' reps.identity, creates Monte Carlo replicates for ENM identity test
#'
#' This function generates replicates for the identity test, as described in
#' Warren et al. 2008
#'
#'
#' @param x One or more .csv files containing species occurrence data
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param verbose Controls printing of diagnostic messages
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the identity test.
#'
#' @keywords keywords
#'
#' @export reps.identity
#'
#' @examples
#' reps.identity(infiles = "~/myfile.csv", outfile = "~/myreps.csv", reps=100)
reps.identity <- function(x, outfile = FALSE, reps = 10, verbose=FALSE, name.column = 1){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
# Test if the arg is a csv or a path to a file
if(class(x) == "character"){
if(!file.exists(x)){
stop(paste(x, "not found!"))
}
# File exists, read it in
x <- read.csv(x)
}
if(verbose){print(paste("Starting identity reps on", paste(infiles, collapse = " and "), "at", Sys.time()))}
if(verbose){print(table(x[,1]))}  #Prints number of points per species
sample.vector <- c()
for(i in 1:reps){
sample.vector <- c(sample.vector, sample(nrow(x), nrow(x), replace=FALSE))
}
output <- cbind(paste(rep(x[,name.column], reps), paste("rep", rep(seq(1:reps), each = nrow(x)), sep = "_"),sep = "_"),
x[sample.vector,-name.column])
colnames(output) <- colnames(x)
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
reps.identity(comb, reps = 5)
#' reps.identity, creates Monte Carlo replicates for ENM identity test
#'
#' This function generates replicates for the identity test, as described in
#' Warren et al. 2008
#'
#'
#' @param x One or more .csv files containing species occurrence data
#' @param outfile An output .csv file to write replicates to.  If not provided, ENMTools
#'        will return a data frame instead.
#' @param reps The number of replicates to create
#' @param verbose Controls printing of diagnostic messages
#'
#' @return output A data frame containing Monte Carlo replicates to be used in constructing
#'         models for the identity test.
#'
#' @keywords keywords
#'
#' @export reps.identity
#'
#' @examples
#' reps.identity(x = rbind(ahli, allogus), outfile = "myreps.csv", reps=100)
reps.identity <- function(x, outfile = FALSE, reps = 10, verbose=FALSE, name.column = 1){
# Will write an output csv file if it receives an outfile name, otherwise just returns the matrix of reps
# Test if the arg is a csv or a path to a file
if(class(x) == "character"){
if(!file.exists(x)){
stop(paste(x, "not found!"))
}
# File exists, read it in
x <- read.csv(x)
}
if(verbose){print(paste("Starting identity reps on", paste(infiles, collapse = " and "), "at", Sys.time()))}
if(verbose){print(table(x[,1]))}  #Prints number of points per species
sample.vector <- c()
for(i in 1:reps){
sample.vector <- c(sample.vector, sample(nrow(x), nrow(x), replace=FALSE))
}
output <- cbind(paste(rep(x[,name.column], reps), paste("rep", rep(seq(1:reps), each = nrow(x)), sep = "_"),sep = "_"),
x[sample.vector,-name.column])
colnames(output) <- colnames(x)
if(outfile != FALSE){write.csv(output, file=outfile, quote=FALSE, row.names=FALSE)}
return(output)
}
reps.identity(x = rbind(ahli, allogus), outfile = "myreps.csv", reps=100)
reps.identity(x = rbind(ahli, allogus_east), outfile = "myreps.csv", reps=100)
library(ENMTools)
plot(allogus_east)
head(allogus_east)
qplot(Latitude, Longitude, data = allogus_east)
library(ggplot2)
qplot(Latitude, Longitude, data = allogus_east)
thinned.allogus <- thin.max(allogus.east, c("Latitude", "Longitude"), 20)
thinned.allogus <- thin.max(allogus_east, c("Latitude", "Longitude"), 20)
qplot(Latitude, Longitude, data = thinned.allogus)
test <- rbind(allogus_east, allogus_east)
test <- rbind(test, test)
test <- rbind(test, test)
test <- rbind(test, test)
test <- rbind(test, test)
test <- rbind(test, test)
test <- rbind(test, test)
test <- rbind(test, test)
dim(test)
test2 <- thin.max(test, c("Latitude", "Longitude"), 20)
qplot(Latitude, Longitude, data = test2)
test <- SpatialPoints(test2)
test <- SpatialPoints(test2[,2:3])
test
plot(test)
attributes(test)
test$coords <- test2[,2:3]
test
attributes(test)
raster.breadth(ahli.raster)
plot(ahli.raster)
points(test)
points(ahli)
points(ahli[,2:3])
